@page "/edititem"
@inject IDbContextFactory<nrcwebContext> dbf
@inject Gtools gtool
@inject DialogService _ds
<style>
    .form-group, input {
        padding: 0px;
        margin: 1px;
        font-weight: bold;
        font-size: small;
        height: 75%;
    }
</style>
<div class="  text-center  alert alert-info border border-info h5  m-1 p-1   ">  @(_item.Id==0? "جديد" : "تعديل")</div>
<EditForm Model=_item OnValidSubmit="HandleValidSubmit">
    <div class="container">

        <div class="row form-group form-inline">
            <label class="col-sm-2" for="StockCode">كود المخزن</label>
            <select class="form-control" value="@_item.StockCode" @onchange="@((a)=>f_onchange("StockCode",a.Value))">
                <option>--select--</option>
                @foreach (var item in _stockist)
                {
                    <option value="@item.StockCode">@item.StockName</option>
                }
            </select>
        </div>
        <ValidationMessage For="() => _item.StockCode" />


        <div class="row form-group form-inline">
            <label class="col-sm-2" for="ItemCode">كود الصنف</label>
            <input style="background-color:lemonchiffon" id="ItemCode" @ondblclick="@(async ()=>await f_ondblclick("itemcode"))" value=@_item.ItemCode @onchange="@((a)=>f_onchange("itemcode",a.Value))" class="form-control col-sm-2" />
            <span class="col-sm-2"></span>
            <label class="col-sm-2" for="OpenbalDate">تاريخ التعريف</label>
            @*<input value="@_item.OpenbalDate" type = "date"  id="OpenbalDate" TValue="Datetime?"  ParsingErrorMessage="التاريخ غير صحيح" class="form-control col-3" @onchange="@(async (a)=>await f_onchange("openbaldate",a.Value))" />*@
            <RadzenDatePicker Value=_item.OpenbalDate DateFormat="dd/MM/yyyy" ShowTime="false" id="OpenbalDate" TValue=DateTime class="form-control col-sm-3  p-0 m-1" @onchange="@(async (a)=>await f_onchange("openbaldate",a.Value))" />
        </div>
        <ValidationMessage For="() => _item.ItemCode" />

        <div class="row form-group form-inline">
            <label class="col-sm-2" for="EngName">وصف</label>
            <InputText id="EngName" @bind-Value="_item.EngName" class="form-control col-sm-4" />
            <span class="col-sm-1"></span>
            <label class="col-sm-1" for="EngName">الوحدة</label>
            <InputText id="EngName" @bind-Value="_item.UnitName" class="form-control col-sm-2" />
        </div>
        <ValidationMessage For="() => _item.EngName" />

        <div class="row form-group   form-inline">


            <label class="col-sm-2" for="OpenQuant">الرصيد الإفتتاحى</label>
            <input id="OpenQuant" Value="@_item.OpenQuant" @onchange="@((a)=>f_onchange("OpenQuant",a.Value))" class="form-control col-sm-2" />
            <span class="col-sm-2"></span>
            <label class="col-sm-2" for="OpenbalQuant">الرصيد الحالى</label>
            <input id="OpenbalQuant" disabled Value="@_item.OpenbalQuant" class="form-control col-sm-2" />
            <ValidationMessage For="() => _item.OpenbalQuant" />
        </div>

        <div class="row form-group  form-inline">
            <label class="col-sm-2" for="ItemOrderlimit">حد الطلب</label>
            <InputNumber id="ItemOrderlimit" @bind-Value="_item.ItemOrderlimit" class="form-control col-sm-2" />
            <span class="col-sm-2"></span>
            <label class="col-sm-2" for="FactQuant">الكمية من الجرد</label>
            <InputNumber id="FactQuant" style="background-color:aqua;" @bind-Value="_item.FactQuant" class="form-control col-sm-2" />
        </div>


        <div class="row form-group form-inline">
            <label class="col-sm-2" for="OpenPrice">سعر الوحدة</label>
            <input id="OpenPrice" value="@_item.OpenPrice" @onchange="@((a)=>f_onchange("OpenPrice",a.Value))" class="form-control col-sm-2" />
            <span class="col-sm-2"></span>
            <label class="col-sm-2" for="Value">أخر سعر وحدة</label>
            <InputNumber id="Value" disabled @bind-Value="_item.Value" class="form-control col-sm-2" />
        </div>



        <div class="row form-group  form-inline">
            <label class="col-sm-2" for="ItemDesc">نوع الصنف</label>
            <select id="ItemDesc" @bind="_item.ItemDesc" name="ItemDesc" class="form-control col-sm-2">
                <option value="1">مستديم</option>
                <option value="2">مستهلك</option>
            </select>





            <span class="col-sm-2"></span>
            <label class="col-sm-2" for="ItemDtype">التصنيف</label>


            <select id="ItemDtype" @bind="_item.ItemDtype" name="ItemDtype" class="form-control col-sm-2">
                <option value="1">عادى</option>
                <option value="2">تاريخ صلاحية</option>
            </select>




        </div>




        <div class="row form-group form-inline">
            <label class="col-sm-2" for="Cas">رقم CAS</label>
            <InputText id="Cas" @bind-Value="_item.Cas" class="form-control col-sm-2" />
            <span class="col-sm-2"></span>
            @{bool flag = (_item.Isinstrument == 1);}
            <RadzenLabel class="col-sm-2" Text="مجموعة أجهزة" Component="Isinstrument" Style="margin-left: 5px;" />

            <RadzenCheckBox class="col-sm-2" Value="@flag" Name="Isinstrument" TValue="bool" Change=@(args => f_onchange("Isinstrument",args)) />



            @*<label class="custom-control-label" for="Isinstrument">
                    مجموعة أجهزة
                    <input type="checkbox" id="Isinstrument" name="Isinstrument" checked>
                </label>*@
        </div>
        <div class="row form-group form-inline">

        </div>
        <div class="row form-group form-inline">
            <label class="col-sm-2" for="ScientificName">البديل العلمى</label>
            <InputText id="ScientificName" @bind-Value="_item.ScientificName" class="form-control col-sm-3" />
            <label class="col-sm-2" for="SeriousLevel">درجة الخطورة</label>
            <InputText id="SeriousLevel" @bind-Value="_item.SeriousLevel" class="form-control col-sm-3" />

        </div>
        <div class="row form-group form-inline">
            <label class="col-sm-2" for="AlternativeName1">البديل الأول</label>
            <InputText id="AlternativeName1" @bind-Value="_item.AlternativeName1" class="form-control col-sm-3" />

            <label class="col-sm-2" for="AlternativeName2">البديل الثانى</label>
            <InputText id="AlternativeName2" @bind-Value="_item.AlternativeName2" class="form-control col-sm-3" />


        </div>

        <div class="row form-group form-inline">
            <label class="col-sm-2" for="AlternativeName3">البديل الثالث</label>
            <InputText id="AlternativeName3" @bind-Value="_item.AlternativeName3" class="form-control col-sm-3" />

            <label class="col-sm-2" for="AlternativeName4">البديل الرابع</label>
            <InputText id="AlternativeName4" @bind-Value="_item.AlternativeName4" class="form-control col-sm-3" />
        </div>

    </div>
    <DataAnnotationsValidator />
    <ValidationSummary />













    <div class="  text-center  alert alert-info border border-info h5  m-1 p-1  btn-group-sm ">

        @*<div class="row  alert alert-info border  btn-group-sm   border-info text-center h6">*@
        <button class="btn btn-primary btn  col-2 mr-auto font-weight-bolder" @onclick="onSave">تسجيل</button>
        <button class="btn btn-primary btn col-2 mr-auto font-weight-bolder" @onclick="onNew">إضافة</button>
        <button class="btn btn-danger btn col-2 mr-auto font-weight-bolder" @onclick="onDelete">حذف</button>
    </div>
</EditForm>








@code {

    private Item _item = new Item();
    private List<Stock> _stockist { get; set; }
    private string curr_stockcode { get; set; }
    protected override void OnInitialized()
    {
        using (var db = dbf.CreateDbContext()) _stockist = db.Stocks.ToList();
    }

    private void onNew()
    {
        //string old_stock;
        //old_stock = _item.StockCode;
        _item = new Item();
        _item.StockCode = curr_stockcode;
        _item.OpenbalDate = DateTime.Parse(DateTime.Now.ToString("dd/MM/yyyy hh:mm tt"));
        using (var db = dbf.CreateDbContext())
        {
            string max = db.Items.Where(i => i.StockCode == curr_stockcode).Max(i => i.ItemCode);
            int o;
            int.TryParse(max, out o);
            o++;
            _item.ItemCode = o.ToString().PadLeft(5);
        }

        //  DateTime.ParseExact(DateTime.Now.ToString("MM/dd/yyyy hh:mm tt"), "", CultureInfo.InvariantCulture);

    }


    private bool on_presave()
    {

        if (String.IsNullOrWhiteSpace(_item.StockCode)) { gtool.Mynotify("خطأ", "كود المخزن غير معرف"); return false; }
        if (String.IsNullOrWhiteSpace(_item.ItemCode)) { gtool.Mynotify("خطأ", "كود الصنف خطأ"); return false; }
        if (String.IsNullOrWhiteSpace(_item.EngName)) { gtool.Mynotify("خطأ", "يجب إدخال إسم الصنف"); return false; }
        if ((!_item.OpenbalDate.HasValue) || String.IsNullOrWhiteSpace(_item.OpenbalDate.ToString())) { gtool.Mynotify("خطأ", "ادخل تاريخ التعريف"); return false; }
        return true;
    }

    private async Task<int> onSave()
    {
        if (!on_presave()) return -1;
        try
        {
            using (var db = dbf.CreateDbContext())
            {
                if (_item.Id == 0)
                    await db.AddAsync(_item);
                else
                    db.Update(_item);
                await db.SaveChangesAsync();
            }
        }
        catch (Exception)
        {
            throw;
        }
        return 0;
    }

    private bool on_predelete()
    {
        if (_item.Id == 0) { gtool.Mynotify("خطأ", "يجب التسجيل قبل الحذف"); return false; }
        if (String.IsNullOrWhiteSpace(_item.StockCode)) { gtool.Mynotify("خطأ", "كود المخزن غير معرف"); return false; }
        if (String.IsNullOrWhiteSpace(_item.ItemCode)) { gtool.Mynotify("خطأ", "كود الصنف خطأ"); return false; }
        if (String.IsNullOrWhiteSpace(_item.EngName)) { gtool.Mynotify("خطأ", "يجب إدخال إسم الصنف"); return false; }
        using (var db = dbf.CreateDbContext())
        {
            if (db.Dadds.Where(d => d.StockCode == _item.StockCode && d.ItemCode == _item.ItemCode).Any())
            {
                gtool.Mynotify("خطأ", "هذا الصنف تم إستخدامه فى المستندات و لا يمكن حذفه"); return false;
            }

        }
        return true;
    }

    private void onDelete()
    {
        if (!on_predelete()) return;

        try
        {
            using (var db = dbf.CreateDbContext())
                if (_item.Id != 0)
                {
                    db.Remove(_item);
                    if (db.SaveChanges() > 0) onNew();
                }

        }
        catch (DbUpdateException e)
        {

            throw e;
        }

    }

    public async Task f_onchange(string name, dynamic arg)
    {
        string _value = "";
        switch (name.ToLower())
        {
            case "stockcode":
                await Task.Delay(1); //Magic!
                StateHasChanged();
                var _stockcode = (string)arg;

                if (string.IsNullOrEmpty(_stockcode) || string.IsNullOrWhiteSpace(_stockcode))
                {
                    gtool.Mynotify("خطأ", "كود المخزن غير معرف");
                    return;
                }
                using (var db = dbf.CreateDbContext())
                {
                    Stock st;
                    st = db.Stocks.FirstOrDefault<Stock>(a => a.StockCode.Equals(_stockcode));
                    if (st == null)
                    {
                        gtool.Mynotify("خطأ", "كود المخزن غير معرف");
                        return;
                    }
                }
                curr_stockcode = _stockcode;

                onNew();


                break;
            case "itemcode":


                _item.ItemCode = "";
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _value = (string)arg;
                _value = _value.PadLeft(5, '0');
                using (var db = dbf.CreateDbContext())
                {
                    Item it;
                    it = db.Items.FirstOrDefault<Item>(a => a.StockCode.Equals(_item.StockCode) && a.ItemCode.Equals(_value));
                    if (it != null)
                        _item = it;
                    else
                    {

                        onNew();
                        _item.ItemCode = _value;

                    }
                }
                StateHasChanged();
                break;
            case "openprice":
                _value = (string)arg;
                decimal newprice;
                decimal.TryParse(_value, out newprice);
                using (var db = dbf.CreateDbContext())
                {
                    bool lb_check = db.Dadds.Any(d => d.StockCode.Equals(_item.StockCode) && d.ItemCode.Equals(_item.ItemCode));
                    if (_item.Value == 0 || _item.Value == null || !lb_check)
                        _item.Value = newprice;
                }
                _item.OpenPrice = 0;
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _item.OpenPrice = newprice;
                StateHasChanged();
                break;

            case "openquant":
                _value = (string)arg;
                decimal openquant;
                decimal.TryParse(_value, out openquant);
                if (string.IsNullOrWhiteSpace(_value) || openquant <= 0)
                {
                    gtool.Mynotify("خطأ", "يجب إدخال الرصيد الإفتتاحى بشكل سليم");
                    return;
                }
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _item.OpenQuant = openquant;
                _item.OpenbalQuant = openquant;
                StateHasChanged();
                break;

            case "isinstrument":
                if (arg == null || !arg)
                    _value = "0";
                else
                    _value = "1";

                await Task.Delay(1); //Magic!
                StateHasChanged();
                int x;
                int.TryParse(_value, out x);
                _item.Isinstrument = x;
                StateHasChanged();
                break;

            default: break;

            case "openbaldate":
                DateTime dt, olddt;
                olddt = (DateTime)_item.OpenbalDate;
                if (DateTime.TryParse(arg.ToString(), out dt))
                {
                    _item.OpenbalDate = new DateTime();
                    await Task.Delay(3000); //Magic!
                    StateHasChanged();

                    using (var db = dbf.CreateDbContext())
                    {
                        if (dt.Date > (db.GlobVars.FirstOrDefault().Yearend).Value.Date || dt.Date < (db.GlobVars.FirstOrDefault().Yearstart).Value.Date)
                        {


                            // gtool.Mynotify("خطأ", "التاريخ خارج نطاق السنة المالية");
                            _item.OpenbalDate = olddt;

                        }
                        else _item.OpenbalDate = dt;

                    }

                    await InvokeAsync(StateHasChanged);
                }
                break;

        }
    }

    private async Task f_ondblclick(string name)
    {
        Dictionary<string, object> ret;
        List<Item> itemlist;
        switch (name.ToLower())
        {
            case "itemcode":
                using (var db = dbf.CreateDbContext()) itemlist = db.Items.Where(i => i.StockCode == _item.StockCode).ToList();
                ret = await _ds.OpenAsync<GModalList<Item>>("", new Dictionary<string, object>() { { "title", "قائمة الأصناف" }
                    , { "scollist", "itemcode,engname,cas,scientificname,alternativename1" },{ "colheads", "كود الصنف,إسم الصنف,cas,الإسم العلمى,البديل الأول" }, { "data", itemlist } }
                     , new DialogOptions() { ShowTitle = false, Width = "800px", Height = "400px", Resizable = true, Draggable = true });
                if (ret != null)
                {
                    if (!((bool)ret["status"])) return;
                    List<Item> val = ret["result"] as List<Item>;
                    _item.ItemCode = val[0].ItemCode;
                    await f_onchange("itemcode", val[0].ItemCode);
                }
                break;
            default: break;
        }

    }


    private void HandleValidSubmit() { }

}

