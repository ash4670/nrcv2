@page "/editrelated/{formarg:int}"
@inject IDbContextFactory<nrcwebContext> dbf;
@inject DialogService DialogService
@inject Gtools gtool
@inject NavigationManager NavigationManager
<style>
    /* This CSS ensures the table header stays on top */
    .tableFixHead {
        height: 250px;
        overflow-y: auto;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
            z-index: 1000; /* Ensures the header stays above table rows */
            background-color: #007bff; /* Adjust this color to match your header's */
            color: white;
        }
</style>

<div class="card p-0 " style="padding: 0px;">
    <div class="card-header alert alert-primary h3 text-center ">
        @PageTitle  @SectionTitle - @SubTextMany
    </div>
    <div class="card-body p-0" style="padding: 0px;">
        <div class="container">
            <div class="row">
                <div class="col-2  ">
                    <button class="btn btn-primary w-100 mb-2" @onclick="()=>OnMasterButtonClick()">@MasterText</button>
                </div>
                <div class="col-4">
                    <RadzenTextBox @bind-Value="@selectedtklfcode" Change=@(args => f_onchange("tklfcode", args) ) />
                </div>
                <div class="col-4">
                    <RadzenDropDown @bind-Value=@selectedtklfcode Data=@Parenthelplist TextProperty="@nameof(Tklfmain.TklfName)" ValueProperty="@nameof(Tklfmain.TklfCode)"
                                    Change=@(args => f_onchange("tklfcode", args) ) Style="width: 100%; max-width: 400px; display:block;" Name="DropDownParent">
                    </RadzenDropDown>
                </div>
                <div class="col-2">
                    <label>الإجمالى @section_total</label>
                </div>
            </div>

            <div class="row">
                <div class="col-2 ">
                    <button class="btn btn-primary  w-100 mb-2" @onclick="()=>OnsubButtonClick()">@SubText</button>
                </div>
                <div class="col-4">
                    <RadzenTextBox @bind-Value="@selectedsubcode" Change=@(args => f_onchange("tklfsubcode", args)  ) />
                </div>
                <div class="col-4">
                    <RadzenDropDown @bind-Value=@selectedsubcode Data=@(_sublist) TextProperty="@nameof(Tklfsub.TklfsubName)" ValueProperty="@nameof(Tklfsub.TklfsubCode)"
                                    Change=@(args => f_onchange("tklfsubcode", args)  ) Style="width: 100%; max-width: 400px; display:block;" Name="DropDownParent">
                    </RadzenDropDown>
                </div>
                <div class="col-2"> </div>
            </div>


            <div class="  row  ">
                <div class="col-lg mt-3 p-0 border border-primary">
                    <div class="card ">
                        <div class="card-body" style="padding: 0px;">
                            <div class="tableFixHead" style=" height: 250px; font-size: small; overflow: auto; ">
                                <table class="table  table-hover table-bordered  table-sm">
                                    <thead style="position: sticky ; z-index:5;" class="font-weight-bold text-center alert-primary">
                                        <tr style="padding:0;margin:0;max-height:fit-content;">
                                            <th>م</th>
                                            <th class="col-4" style="padding:0;margin:0;"> إسم البـــنـــد </th>
                                            <th class="col-3" style="padding:0;margin:0">رقم المستند </th>
                                            <th class="col-3" style="padding:0;margin:0">تاريخ المستند </th>
                                            <th class="col-3" style="padding:0;margin:0">القيمة </th>
                                            <th> </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{int r = 0; double? total = 00.00;}

                                        @foreach (var item in _TrnsList)
                                        {
                                            <tr style="padding:0;margin:0;max-height:fit-content; background-color:lightsteelblue">
                                                <td>@(r + 1) </td>
                                                <td>
                                                    <RadzenDropDown @bind-Value=@item.OutCode Data=@OutHelpList TextProperty="@nameof(Out.OutName)" ValueProperty="@nameof(Out.OutCode)"
                                                                    @bind-SearchText=SearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                                                    Change=@(args => f_onchange("outcode", args) )
                                                                    Style="width: 100%; max-width: 400px; display:block;" Name="DropDownOuts">
                                                    </RadzenDropDown>
                                                </td>
                                                <td>
                                                    <RadzenNumeric ShowUpDown="false" TValue="int?" @bind-Value="@item.No" />
                                                </td>

                                                <td>
                                                    <RadzenDatePicker Value=item.OutDate DateFormat="dd/MM/yyyy" ShowTime="false" id="OpenbalDate" TValue=DateTime />
                                                </td>

                                                <td>
                                                    <RadzenNumeric ShowUpDown="false" TValue="double?" @bind-Value="@item.Value" />
                                                </td>

                                                <td>
                                                    <RadzenButton Size="ButtonSize.Medium" Text="X" class="badge" Click="() => DeleteLine(item)" />
                                                </td>
                                            </tr>
                                            total += item.Value ?? 0;
                                            r++;
                                        }
                                        <tr>
                                            <td></td>
                                            <td>الإجمالى</td>
                                            <td></td>
                                            <td>@total</td>
                                            <td></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div class="card-footer p-2">
                            <div class="row text-center">
                                <div class="col">
                                    <RadzenButton Text="تسجيل" Click="onSave"></RadzenButton>
                                </div>
                                <div class="col">
                                    <RadzenButton Text=" حذف كل السطور" Click="onDelete"></RadzenButton>
                                </div>
                                <div class="col">
                                    <RadzenButton Text="إضافة سطر" Click="() => AddNewLine()" />
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int formarg { get; set; }
    [Parameter]
    public string trnstype { get; set; }
    public string SectionTitle = "";
    public string SearchText = "";
    public string MasterText { get; set; }
    public string MasterTextMany { get; set; }
    public string SubText { get; set; }
    public string SubTextMany { get; set; }
    public string PageTitle { get; set; } = "";
    public string ikind_code { get; set; }
    public string selectedtklfcode { get; set; }
    public string selectedsubcode { get; set; }
    public double section_total { get; set; } = 0.00;
    List<Tklfmain> Parenthelplist { get; set; } = new();
    List<Out> OutHelpList { get; set; } = new();
    Tklfmain selectedparent { get; set; } = new();
    List<Tklfsub> _sublist { get; set; } = new();
    List<Related> _TrnsList { get; set; } = new();
    Tklfsub selectedsub { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {

        PageTitle = "تعريف مستندات تعزيز";

        //    case "related":
        //        PageTitle = "تعريف مستندات إرتباط";

        //        break;
        //    default:
        //        break;
        //}

        switch (formarg)
        {
            case 2:
                ikind_code = "02";
                SectionTitle = "";
                MasterText = "كود القسم";
                MasterTextMany = "الأقسام";
                SubText = "رسالة";
                SubTextMany = "رسائل";
                break;
            case 4:
                ikind_code = "04";
                SectionTitle = " المعامل و المزارع";
                MasterText = "اسم مزرعة / معمل";
                MasterTextMany = "المعامل/المزارع";
                SubText = "مشروع";
                SubTextMany = "مشروعات";
                break;
            case 5:
                ikind_code = "05";
                SectionTitle = "مشروعات الخطة الثالثة عشر";
                MasterText = "كود المحور";
                MasterTextMany = "المحاور";
                SubTextMany = "مشروعات";
                SubText = "مشروع";
                break;
            case 6:
                ikind_code = "06";
                SectionTitle = "مشروعات الخطة التكميليه MP";
                MasterText = "كود الشعبة";
                MasterTextMany = "الشعب";
                SubTextMany = "مشروعات";
                SubText = "المشروع";
                break;
            case 12:
                ikind_code = "12";
                SectionTitle = "مشروعات الخطة E";
                MasterText = "كود الشعبة";
                MasterTextMany = "الشعب";
                SubTextMany = "مشروعات";
                SubText = "المشروع";
                break;

            default:
                break;
        }

        using (var db = dbf.CreateDbContext())
        {
            Parenthelplist = await db.Tklfmains.Where(t => t.KindCode == ikind_code).ToListAsync();
            if (Parenthelplist.Count() == 0)
            {
                gtool.Mynotify("خطأ", "لا يوجد " + " " + MasterTextMany);
                NavigationManager.NavigateTo("/");
                return;
            }
            OutHelpList = db.Outs.ToList();
            selectedparent = await db.Tklfmains.Include(p => p.Tklfsubs).Where(t => t.KindCode == ikind_code).FirstOrDefaultAsync();
            _sublist = selectedparent.Tklfsubs.OrderBy(a => a.TklfsubCode).ToList();
            selectedsub = _sublist?.FirstOrDefault();
            section_total = db.Relateds != null && selectedsub != null ? (await db.Relateds.Where(M => M.KindCode == selectedparent.KindCode && M.TklfCode == selectedparent.TklfCode && M.TklfsubCode == selectedsub.TklfsubCode).ToListAsync()).Sum(d => d.Value ?? 0) : 0.00;
            selectedtklfcode = selectedparent?.TklfCode;
            await f_onchange("tklfcode", selectedtklfcode);
            selectedsubcode = selectedsub?.TklfsubCode;
            await f_onchange("tklfsubcode", selectedsubcode);
        }
        await base.OnParametersSetAsync();

    }

    private void AddNewLine()
    {
        if (string.IsNullOrEmpty(ikind_code) || string.IsNullOrEmpty(selectedtklfcode) || selectedsub == null) return;
        Related row = new();
        row.KindCode = ikind_code;
        row.TklfCode = selectedtklfcode;
        row.TklfsubCode = selectedsub.TklfsubCode;
        row.OutDate = DateTime.Today;
        _TrnsList.Add(row);
    }

    private void DeleteLine(Related m)
    {
        _TrnsList.Remove(m);
        if (_TrnsList.Count() == 0) AddNewLine();//add new empty row
    }

    public async Task f_onchange(string name, dynamic arg)
    {
        string _value = "";
        switch (name.ToLower())
        {
            case "tklfcode":
                //this is the parent قسم
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _value = arg;
                if (string.IsNullOrEmpty(_value))
                {
                    return;
                }

                using (var db = dbf.CreateDbContext())
                {
                    selectedparent = await db.Tklfmains.Include(m => m.Tklfsubs).FirstOrDefaultAsync(a => a.KindCode == ikind_code && a.TklfCode == _value);
                    _sublist = selectedparent.Tklfsubs.OrderBy(a => a.TklfsubCode).ToList();
                    selectedsub = _sublist?.FirstOrDefault();
                    selectedsubcode = selectedsub?.TklfsubCode;
                    if (db.Relateds != null && selectedsub != null)
                    {
                        section_total = (await db.Relateds.Where(m => m.KindCode == selectedparent.KindCode && m.TklfCode == selectedparent.TklfCode && m.TklfsubCode == selectedsub.TklfsubCode).ToListAsync()).Sum(d => d.Value ?? 0);
                        _TrnsList = await db.Relateds.Where(m => m.KindCode == selectedparent.KindCode && m.TklfCode == selectedparent.TklfCode && m.TklfsubCode == selectedsub.TklfsubCode).ToListAsync();
                    }
                    else
                    {
                        section_total = 0;
                        _TrnsList.Clear();
                    }
                }

                if (_sublist?.Count == 0)
                    //   gtool.Mynotify("خطأ", " لا يوجد"+ SubTextMany  );

                    StateHasChanged();
                break;



            case "tklfsubcode":
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _value = arg;
                if (string.IsNullOrEmpty(_value)) return;

                using (var db = dbf.CreateDbContext())
                {
                    selectedsub = selectedparent?.Tklfsubs.Where(s => s.TklfsubCode == _value).FirstOrDefault();
                    selectedsubcode = selectedsub?.TklfsubCode;
                    if (db.Relateds != null && selectedsub != null)
                    {
                        _TrnsList = await db.Relateds.Where(m => m.KindCode == selectedparent.KindCode && m.TklfCode == selectedparent.TklfCode && m.TklfsubCode == selectedsub.TklfsubCode).ToListAsync();
                        section_total = (await db.Relateds.Where(m => m.KindCode == selectedparent.KindCode && m.TklfCode == selectedparent.TklfCode && m.TklfsubCode == selectedsub.TklfsubCode).ToListAsync()).Sum(s => s.Value ?? 0);

                    }
                    else
                    {
                        _TrnsList.Clear();
                        section_total = 0;
                    }
                }

                if (_TrnsList?.Count == 0)
                    AddNewLine();

                StateHasChanged();
                break;



            default: break;
        }
    }

    private async Task OnsubButtonClick()
    {
        if (selectedparent == null || string.IsNullOrEmpty(selectedtklfcode))
        {
            gtool.Mynotify("خطأ", MasterText + "يجب إختيار ");
            return;
        }

        if (!selectedparent.Tklfsubs.ToList().Any())
        {
            gtool.Mynotify("خطأ", "لا يوجد بيانات");
            return;
        }
        Dictionary<string, object> ret = await DialogService.OpenAsync<GModalList<Tklfsub>>("",
   new Dictionary<string, object>() { { "data", this.selectedparent.Tklfsubs.ToList() }, { "title", " قائمة أكواد " + this.SubText }, { "scollist", nameof(Tklfsub.TklfsubCode) + "," + nameof(Tklfsub.TklfsubName) + "," + nameof(Tklfsub.Name1) }, { "colheads", "الكود,رقم الرسالة,إسم المشرف" } },
   new DialogOptions() { ShowTitle = false, Width = "800px", Height = "470px", Resizable = true, Draggable = true });

        if (ret != null)
        {
            if (!((bool)ret["status"])) return;
            List<Tklfsub> val = ret["result"] as List<Tklfsub>;
            selectedsub = val[0] as Tklfsub;
            this.selectedsubcode = selectedsub.TklfsubCode;
            await f_onchange("tklfsubcode", val[0].TklfsubCode);
        }
    }

    private async Task OnMasterButtonClick()
    {
        Dictionary<string, object> ret = await DialogService.OpenAsync<GModalList<Tklfmain>>("",
        new Dictionary<string, object>() { { "data", Parenthelplist }, { "title", " قائمة أكواد " + MasterTextMany }, { "scollist", "Tklfcode,tklfname" }, { "colheads", "الكود,الإسم" } },
        new DialogOptions() { ShowTitle = false, Width = "800px", Height = "470px", Resizable = true, Draggable = true });

        if (ret != null)
        {
            if (!((bool)ret["status"])) return;
            List<Tklfmain> val = ret["result"] as List<Tklfmain>;
            selectedparent = val[0] as Tklfmain;
            selectedtklfcode = selectedparent.TklfCode;
            await f_onchange("tklfcode", val[0].TklfCode);
        }
    }

    private bool on_presave()
    {
        //remove empty out codes
        _TrnsList.RemoveAll(item => string.IsNullOrEmpty(item.OutCode));

        if (_TrnsList.Any(t => t.No == null))
        {
            gtool.Mynotify("خطأ", "يجب إدخال رقم المستند");
            return false;
        }
        if (_TrnsList.Any(t => string.IsNullOrEmpty(t.OutCode)))
        {
            gtool.Mynotify("خطأ", "يجب إدخال كود الصرف");
            return false;
        }

        if (_TrnsList.Any(t => !t.OutDate.HasValue))
        {
            gtool.Mynotify("خطأ", "يجب إدخال تاريخ المستند");
            return false;
        }

        if (_TrnsList.Where(t => string.IsNullOrEmpty(t.TklfCode) || string.IsNullOrEmpty(t.TklfsubCode)).Any())
        {
            gtool.Mynotify("خطأ", " بشكل سليم" + this.SubTextMany + " يجب إدخال بيانات");
            return false;
        }


        return true;
    }

    private async Task<int> onSave()
    {
        if (!on_presave()) return -1;
        try
        {
            using (var db = dbf.CreateDbContext())
            {


                var originaldata = await db.Relateds.Where(c => c.KindCode == ikind_code && c.TklfCode == selectedparent.TklfCode && c.TklfsubCode == selectedsub.TklfsubCode).AsNoTracking().ToListAsync();
                foreach (var detailrow in originaldata)
                {
                    if (!_TrnsList.Any(c => c.Id == detailrow.Id))
                    {
                        db.Entry(detailrow).State = EntityState.Deleted;
                    }
                }

                // Step 2: Handle additions and modifications
                foreach (var row in _TrnsList)
                {
                    if (row.Id == 0) // Assuming 'IsNew' flag indicates a new row
                    {
                        db.Add(row); // Add new child to the context
                    }
                    else
                    {
                        db.Entry(row).State = EntityState.Modified; // Mark existing child as modified
                    }
                }

                // Save all changes (adds, updates, and deletes) to the database
                await db.SaveChangesAsync();
            }





        }
        catch (Exception)
        {
            gtool.Mynotify("خطأ", "لم يتم التسجيل");
            throw;

        }
        gtool.Mynotify("", "تم التسجيل");
        return 0;
    }

    private bool on_prdelete()
    {

        return true;
    }

    private async Task onDelete()
    {
        if (!on_prdelete()) return;
        using (var db = dbf.CreateDbContext())
        {
            try
            {

                db.Relateds.RemoveRange(_TrnsList);
                await db.SaveChangesAsync();

            }
            catch (DbUpdateException e)
            {
                gtool.Mynotify("خطأ", "لم يتم الحذف");
                throw e;
            }
            _TrnsList = await db.Relateds.Where(m => m.KindCode == selectedparent.KindCode && m.TklfCode == selectedparent.TklfCode && m.TklfsubCode == selectedsub.TklfsubCode).ToListAsync<Related>();
            gtool.Mynotify("خطأ", "تم الحذف");
        }
        if (_TrnsList.Count() == 0) AddNewLine();//add new empty row
    }

}




