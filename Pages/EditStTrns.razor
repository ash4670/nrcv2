@page "/editsttrns/{kind:int}"
@*@page "/editsstrns/{kind:int}/{id:int}"*@
@inject IDbContextFactory<nrcwebContext> dbf;
@inject DialogService ds
@*@inject NotificationService ns*@
@inject Gtools gt



<style>
    .tableFixHead thead th, thead > tr, thead {
        position: sticky !important;
        top: 0 !important;
        z-index: 1 !important;
        overflow: auto !important;
    }
    
</style>

<div class="card  border-secondary" style="width:98% !important;height:97%; font-weight:bolder;">

    <div class="card-header font-weight-bold  alert-primary  h6 text-center m-1 p-1 rounded ">
        @_hadd.StockCode
        @_hadd.Kind
        @_hadd.TrnNo
        @(_hadd.Kind == 1 ? "إذن إضافة" : "إذن صرف") - @(_hadd.Id == 0 ? "جديد" : "تعديل")
    </div>
   
    <RadzenTemplateForm TItem="Hadd" Data=@_hadd InvalidSubmit=@OnInvalidSubmit>
        <div class="row">
            <div class="col-6">
                <div class="form-group  row  p-0 m-1">
                    <Label class="btn-outline-primary btn-sm col-4 h-50 " @onclick="@(async ()=>await f_ondblclick("stockcode"))">كود المخزن ...</Label>
                    <span>
                        <RadzenMask Mask=@stockcode_mask Pattern="[^0-9]" style="background-color:lemonchiffon" Name="StockCode"
                                    @bind-Value=@_hadd.StockCode Change=@(args => f_onchange( "stockcode",args))
                                    @ondblclick="@(async ()=>await f_ondblclick("stockcode"))" />
                        <RadzenRequiredValidator Component="StockCode" Text="يجب إدخال كود المخزن" Style="position: absolute" />
                        <RadzenRegexValidator Component="StockCode" Text="كود المخزن رقمين" Pattern="\d{2}" Style="position: absolute" />
                    </span>

                </div>

                <div class="form-group  row  p-0 m-1">
                    <Label class="btn-outline-primary btn-sm col-4" @onclick="@(async ()=>await f_ondblclick("trnno"))">رقم المستند ...</Label>
                    <span>
                        <RadzenMask Mask=@trn_no_mask Pattern="[^0-9]" style="background-color:lemonchiffon" Name="trn_no"
                                    @bind-Value=@_hadd.TrnNo Change=@(args => f_onchange( "trnno",args))
                                    @ondblclick="@(async ()=>await f_ondblclick("trnno"))" />
                        <RadzenRequiredValidator Component="trn_no" Text="يجب إدخال رقم المستند" Style="position: absolute" />
                        <RadzenRegexValidator Component="trn_no" Text="رقم المستند 10 أرقام" Pattern="\d{10}" Style="position: absolute" />

                    </span>
                   

                </div>


                <div class="form-group row p-0 m-1">
                    <label for="trn_date" style="font-size:small;" class="col-4">التاريخ</label>

                    <RadzenDatePicker class="col-8" Name="trn_date" TValue=DateTime ShowTime="true" Value=_hadd.TrnDate HourFormat="12"
                                      DateFormat="dd/MM/yyyy hh:mm:ss tt" Change=@(args=>f_onchange("trn_date",args )) />
                    <RadzenRegexValidator Component="trn_date" Text="يجب إدخال التاريخ بشكل سليم" Pattern="dd/MM/yyyy hh:mm:ss tt" />

                </div>

                <div class="form-group row p-0 m-1">
                    <label for="ghaname" style="font-size:small;" class="col-4">الجهة الطالبة</label>

                    <RadzenDropDown class="col-7" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@(new List<string>() {"الادارات","رســـائـــل","أقســـــام","مزارع وجهات","خطة التكميلى MP","الخطة المصرية الإيطالية IT","محاور الخطة البحثية الثانية عشر","التكنولوجيا القادمة من الخارج TT","الخطة الرومانية RO","مشروعات الخطة البحثية الثانية عشر E" }) @bind-Value=@_hadd.GhaName
                                    Change=@(args => f_onchange("ghaname",args ))>
                        <Template Context="x">
                            <strong>@x</strong>
                        </Template>
                    </RadzenDropDown>
                </div>
                <div class="form-group row p-0 m-1">
                    @if (!shownum)
                    {
                        <RadzenLabel Text="إسم الجهة" class="col-4" />
                        <RadzenDropDown class="col-7" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@list_tklf_main @bind-Value=@_hadd.GhaMain
                                        TextProperty="TklfName" ValueProperty="TklfCode" Change=@(args => f_onchange("ghamain", args))>

                            <Template Context="x">
                                <strong> @((x as Tklfmain).TklfCode +" "+ (x as Tklfmain).TklfName ) </strong>
                            </Template>
                        </RadzenDropDown>
                    }
                    else
                    {
                        <RadzenLabel Text="رقم الجهة" class="col-4" />
                        <RadzenDropDown class="col-7" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@list_tklf_sub @bind-Value=@_hadd.GhaNum
                                        TextProperty="TklfsubName" ValueProperty="TklfsubCode" Change=@(args => f_onchange("ghanum", args))>

                            <Template Context="x">
                                <strong> @((x as Tklfsub).TklfsubCode+" " + (x as Tklfsub).TklfsubName+" " + (x as Tklfsub).Name1 )</strong>
                            </Template>
                        </RadzenDropDown>
                    }
                    @*<RadzenTextBox Name="ghaname" @bind-Value=@_hadd.GhaName Change=@(args => f_onchange("ghaname",args )) />*@

                </div>

                @*<div class="form-group row p-0 m-1">
                        <RadzenLabel Text="إسم الجهة" class="col-2" />
                        <span>
                            <RadzenTextBox Name="GhaMain" @bind-Value=@_hadd.GhaMain Change=@(args => f_onchange( "GhaMain",args)) />
                         </span>
                    </div>*@
            </div>

            @*<div class="form-group row p-0 m-1">
                    <label for="docdate" style="font-size:small;" class="col-2">التاريخ</label>
                    <RadzenDatePicker Name="docdate" TValue=DateTime Value=@_hadd.DocDate ShowTime="false"
                                      form="docdate" DateFormat="dd/MM/yyyy  hh:mm:ss tt" Change=@(args=>f_onchange("docdate",args )) />
                    <RadzenRegexValidator Component="trn_date" Text="يجب إدخال التاريخ بشكل سليم" Pattern="dd/MM/yyyy hh:mm:ss tt" Style="position: absolute" />
                </div>*@
            <div class="col-6">
                @if (kind == 1)
                {

                    <h4 style="background-color:cadetblue;width:95%;text-align:center;">بيانات أمر التوريد</h4>
                    <div class="form-group row p-0 m-1">
                        <label for="docno" style="font-size:small;" class="col-4">النوع</label>
                        <RadzenDropDown class="col-7" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data=@(new List<string>() {"سلفة","ت محلى","ت اجنبى","عاجل","منحة","شهادة إدارية","عقود أجنبية","ح جارى","ارتجاع","اجهزة علمية" })
                                        @bind-Value=@_hadd.DocNo
                                        Change=@(args => f_onchange("docno",args )) />
                    </div>
                    <div class="form-group row p-0 m-1">
                        <label for="docnon" style="font-size:small;" class="col-4">
                            <span> رقم أمر التوريد</span>
                        </label>
                        <RadzenTextBox  Name="docnon" form="docnon" @bind-Value=@_hadd.DocNoN Change=@(args => f_onchange( "docnon",args)) />
                    </div>
                    <div class="form-group row p-0 m-1">
                        <label for="suppname" style="font-size:small;" class="col-4">المورد</label>
                        <RadzenTextBox Name="suppname" form="suppname" @bind-Value=@_hadd.SuppName Change=@(args => f_onchange( "suppname",args)) />
                    </div>
                    <div class="form-group border-secondary row m-1">
                        <label for="incdec" style="font-size:small;" class="col-4">نوع الضرائب</label>
                        <RadzenRadioButtonList id="incdec" Name="incdec" TValue="int" Value="@(_hadd.IncDec==null?0:_hadd.IncDec.Value)" Change=@(args => f_onchange( "incdec",args))>
                            <Items>
                                <RadzenRadioButtonListItem Text="خصم" Value="1" />
                                <RadzenRadioButtonListItem Text="إضافة" Value="2" />
                            </Items>
                        </RadzenRadioButtonList>
                    </div>

                    <div class="form-group row p-0 m-1">
                        <label for="perc" style="font-size:small" class="col-4">النسبـة</label>

                        <RadzenNumeric Name=perc format="0.00" Style="padding: 0px; margin: 3px;" ShowUpDown="false" class="col-3" TValue="double?" form="perc" @bind-Value=@_hadd.Perc Change=@(args => f_onchange( "perc",args.Value )) />
                        <button class="btn btn-sm btn-info col-4" @onclick="on_cbTaxClicked">حساب الضريبة</button>

                    </div>



                }

                @if (kind == 2)
                {
                    <div class="form-group row p-0 m-1">
                        <label for="outcode" style="font-size:small;" class="col-4">بنــود الصــرف</label>
                        <RadzenDropDown Name=outcode form="outcode" class="col-7" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        Data=@list_outs
                                        TextProperty="OutName" ValueProperty="OutCode"
                                        @bind-Value=@_hadd.OutCode
                                        Change=@(args => f_onchange( "outcode",args )) />
                    </div>

                    <div class="form-group row bo  p-0 m-1">
                        <label for="arname"  style=" font-size:small;" class="col-4">كود المستـــلم</label>
                        <RadzenTextBox Name=arname style="background-color: lemonchiffon;" form="arname" @bind-Value=@_hadd.ArName Change=@(args => f_onchange( "arname",args )) @ondblclick="@(async ()=>await f_ondblclick("arname"))" />
                    </div>
                        @if (!string.IsNullOrWhiteSpace(_hadd.ArName))
                        {
                            
                    <div class="form-group row bo  p-0 m-1">
                        <label for="arname" style="font-size:small;" class="col-4">إســـم المستـــلم</label>
                        <span>@(gt.GetAll<Arname>(a=>a.ArCode == _hadd.ArName).FirstOrDefault().ArName1) </span>
                    </div>
                    <div class="form-group row bo  p-0 m-1">
                        <label for="arname" style="font-size:small;" class="col-4">الرقم القومى</label>
                        <span>@(gt.GetAll<Arname>(a=>a.ArCode == _hadd.ArName).FirstOrDefault().Nid) </span>
                    </div>
                        }
                    

                    <div class="form-group row p-0 m-1">
                        <label class="col-4"> </label>
                        <button class="btn btn-sm btn-info  col-7  font-weight-bolder" @onclick="on_cbOhdaClicked">إجمالى عهدة شخص</button>
                    </div>

                    <div class="form-group row p-0 m-1">
                        <label for="tanazol" style="font-size:small;" class="col-4">التنازل</label>
                        <RadzenNumeric TValue="decimal?" ShowUpDown="false" Format="0.00" Name=tanazol form="tanazol" @bind-Value=@_hadd.Tanazol Change=@( args => f_onchange( "tanazol",args.Value )) />
                    </div>
                    <div class="form-group row p-0 m-1">
                        <label for="docnon" style="font-size:small;" class="col-4">
                            <span> رقم الإضافة</span>
                        </label>
                        <RadzenTextBox Name="docnon" form="docnon" @bind-Value=@_hadd.DocNoN Change=@(args => f_onchange( "docnon",args)) />
                    </div>
                }

            </div>
        </div>
    </RadzenTemplateForm>


    <div class="tableFixHead" style=" height: 250px; font-size: small; overflow: auto; ">
        <table class="table  table-hover table-bordered  table-sm">
            <thead class="font-weight-bold text-center alert-primary">
                @if (_hadd.Dadds.Any())
                {

                    <tr style="padding:0;margin:0;max-height:fit-content;"><th>م</th><th class="col-1" style="padding:0;margin:0;"> كود الصنف</th> <th class="col-3" style="padding:0;margin:0 ;">  إسم الصنف</th>  <th class="col-2" style="padding:0;margin:0">الوحدة</th><th class="col-2" style="padding:0;margin:0">الكمية</th> <th class="col-2" style="padding:0;margin:0"> السعر</th><th class="col-2" style="padding:0;margin:0">الإجمالى</th> <th> حذف</th> </tr>
                }
            </thead>
            <tbody>

                @{int r = 0; }
                @foreach (var item in _hadd.Dadds)
                {
                    <tr style="padding:0;margin:0;max-height:fit-content; background-color:lightsteelblue">
                        <td>@(r+1) </td>
                        <td class="col-1" style="padding: 0; margin: 0"> <RadzenTextBox Style=" background-color: lemonchiffon; padding: 0; margin: 0;" class="col-12" @ondblclick="@(async ()=>await f_ondblclickdetail("itemcode", _hadd.Dadds.ToList().IndexOf(item)))" Name=itemcode form="itemcode" @bind-Value="@item.ItemCode" Change=@(args => f_onchangedetail( "itemcode",args, _hadd.Dadds.ToList().IndexOf(item))) /></td>
                        <td class="col-3" style="padding:0;margin:0 ; "><RadzenTextBox style="padding:0;margin:0;" form="engname" class="col-12" @bind-Value="@item.EngName"  readonly /></td>
                        <td class="col-2" style="padding: 0; margin: 0;">  <strong style="padding:0;margin:0;">@item.UnitName</strong></td>
                        <td class="col-2" style="padding:0;margin:0"> <RadzenNumeric TValue="double?" ShowUpDown="false" form="itemquant" style="padding:0;margin:0;" class="col-12" @bind-Value="@item.ItemQuant"  Change=@(args => f_onchangedetail( "itemquant",args, _hadd.Dadds.ToList().IndexOf(item))) /></td>
                        <td class="col-2" style="padding:0;margin:0"> <RadzenNumeric TValue="double?" ShowUpDown="false" Format="0.000" style="padding:0;margin:0;" class="col-12" readonly="@(kind==2)" form="itemprice" @bind-Value="@item.ItemPrice"  Change=@(args => f_onchangedetail( "itemprice",args, _hadd.Dadds.ToList().IndexOf(item))) /></td>
                        <td class="col-2" style="padding:0;margin:0">@String.Format("{0:0.000}", item.ItemQuant * item.ItemPrice ?? 0)</td>

                        <td style="padding:0;margin:0 ;text-align:center "> <button tabindex=-1 style="width: inherit;" class="btn btn-primary btn-sm" @onclick="()=> { _hadd.Dadds.Remove(item); } ">&times;</button></td>
                    </tr>
                    r++;

                }
            </tbody>
        </table>



        @*<div class="d-block d-md-none">
                <ul>
                    @{ int k = 0; }
                    @foreach (var item in _hadd.Dadds)
                    {
                        <li>
                            @(k+1)
                            <Label class="btn-outline-primary col-sm-2" @ondblclick="@(async ()=>await f_ondblclickdetail("itemcode",_hadd.Dadds.ToList().IndexOf(item)))">كود الصنف</Label>
                            <span>
                                <RadzenMask Mask=@itemmask Pattern="[^0-9]" style="display: block ; background-color:lemonchiffon" Name="itemcode"
                                            @bind-Value=item.ItemCode Change=@(args => f_onchangedetail( "itemcode",args,_hadd.Dadds.ToList().IndexOf(item)))
                                            @ondblclick="@(async ()=>await f_ondblclickdetail("itemcode",_hadd.Dadds.ToList().IndexOf(item)))" />
                                <RadzenRequiredValidator Component="itemcode" Text="يجب إدخال كود الصنف" Style="position: absolute" />
                                <RadzenRegexValidator Component="itemcode" Text="كود الصنف 5 أرقام" Pattern="\d{5}" Style="position: absolute" />

                            </span>
                            <span>@item.EngName</span>
                            <Label class="btn-outline-primary col-sm-2" @onclick="@(async ()=>await f_ondblclick("itemcode"))">الوحدة</Label>
                            <RadzenTextBox Style="width: inherit !important; height: inherit !important;" form="unitname" class="form-control-sm" @bind-Value="@item.UnitName" />
                        </li>
                        k++;
                    }
                </ul>
            </div>*@

    </div>

    <div class="card-footer">
        <div class="alert alert-primary h6 text-center     btn-group-sm  row ">
            <button class="btn btn-primary  ml-1 ml-md-1   col-2 font-weight-bolder" ButtonType="ButtonType.Submit" @onclick="onSave">تسجيل</button>
            <button class="btn btn-primary  ml-1 ml-md-1   col-2  font-weight-bolder" @onclick="onNew">جديد</button>
            <button class="btn btn-primary  ml-1 ml-md-1   col-2  font-weight-bolder" @onclick="onAddNewItem">إضافة صنف</button>
            <button class="btn btn-danger  ml-1 ml-md-1  col-2 font-weight-bolder" @onclick="@(a=>onDelete())">حذف</button>

        </div>
    </div>

</div>

@code {
    #region code

    #region declarations
    [Parameter]
    public int? id { get; set; }
    [Parameter]
    public int kind { get; set; }
    private Hadd _hadd;
    private string stockcode_mask = "**";
    private string trn_no_mask = "**********";
    private string itemmask = "*****";
    private string curr_stockcode;
    string LGHA_CODE = "01";
    private List<Gha> lgehat = new List<Gha>();
    private List<Tklfmain> list_tklf_main = new List<Tklfmain>();
    private List<Tklfsub> list_tklf_sub = new List<Tklfsub>();
    private List<Out> list_outs = new List<Out>();
    bool shownum = false;
    #endregion  declarations

    protected override void OnInitialized()
    {
        list_outs = gt.GetAll<Out>().ToList();
    }

    protected override void OnParametersSet()
    {
        curr_stockcode = "";
        _hadd = new Hadd();
        using (var db = dbf.CreateDbContext())
        {
            list_tklf_main = db.Tklfmains.ToList();
            list_tklf_sub = db.Tklfsubs.ToList();
        }
        if (id != null) using (var db = dbf.CreateDbContext()) _hadd = db.Hadds.Where(r => r.Id == id).FirstOrDefault();
        else onNew();
    }

    private bool on_presave()
    {
        if (string.IsNullOrWhiteSpace(_hadd.TrnNo)) {
            gt.Mynotify("خطأ","يجب إدخال رقم المستند بشكل سليم");
            return false;
        }
        if (string.IsNullOrWhiteSpace(_hadd.GhaCode))
        {
            gt.Mynotify("خطأ","كود الجهة خطأ");
            return false;
        }

        if (string.IsNullOrWhiteSpace(_hadd.GhaMain) ) {
            gt.Mynotify("خطأ", "يجب إدخال إسم الجهة");
            return false;
        }
        if (_hadd.IncDec == null) { _hadd.IncDec = 0; }
        if (_hadd.Perc == null) { _hadd.Perc = 0; }
        using (var db = dbf.CreateDbContext())
        {
            if ((_hadd.TrnDate)?.Date > (db.GlobVars.FirstOrDefault().Yearend).Value.Date || (_hadd.TrnDate)?.Date < (db.GlobVars.FirstOrDefault().Yearstart).Value.Date)
            {
                gt.Mynotify("خطأ", "التاريخ خارج نطاق السنة المالية");
                return false;
            }
        }
        if (kind == 2) {
            if (!gt.CheckArcodeStatus(_hadd.ArName)) {
                return false;
            }
        }


        List<Dadd> _l_dadd=_hadd.Dadds.Where(d => string.IsNullOrWhiteSpace(d.ItemCode)).ToList();
        foreach (Dadd item in _l_dadd)
        {
            _hadd.Dadds.Remove(item);
        }

        using (var db = dbf.CreateDbContext())
        {
            foreach (Dadd row in _hadd.Dadds)
            {

                if (!db.Items.Any(i => i.ItemCode.Equals(row.ItemCode) && i.StockCode.Equals(row.StockCode)))
                {
                    gt.Mynotify("خطأ",row.ItemCode+" " + "الصنف غير معرف فى ملف الأصناف");
                    return false;
                }

                if (row.ItemPrice == 0) {
                    gt.Mynotify("خطأ", row.ItemCode+" " +"سعر الصنف خطأ");
                    return false;
                }

                if (row.ItemQuant == 0)
                {
                    gt.Mynotify("خطأ", row.ItemCode + " " + "كمية الصنف خطأ");
                    return false;
                }
                row.Kind = (byte)kind;
                row.TrnNo = _hadd.TrnNo;
                row.TrnYear = _hadd.TrnYear;
                row.TrnDate = _hadd.TrnDate;
                row.StockCode = _hadd.StockCode;
                row.IncDec = _hadd.IncDec;
                row.Perc = _hadd.Perc;
            }

            if (!_hadd.Dadds.Any()) {

                gt.Mynotify("خطأ", "لم يتم إدخال أصناف المستند");
                return false;
            }
            return true;
        }

     //   return true;
    }

    private async Task<int> onSave()
    {
        if (!on_presave()) return -1;
        bool is_ok=true;
        using (var db = dbf.CreateDbContext())
        {
            using (var transaction = db.Database.BeginTransaction())
            {
                try
                {
                    if (kind == 2)
                    {
                        //remove ohda//year
                        var x = db.Arquants.Where(a => a.TrnNo.Equals(_hadd.TrnNo) && a.StockCode.Equals(curr_stockcode) && a.Kind.Equals("0")).FirstOrDefault();
                        if (x != null) { db.Arquants.Remove(x); }
                        foreach (var item in _hadd.Dadds)
                        {
                            if (item.ItemDesc == 1)
                            {
                                Arquant arq = new Arquant();
                                arq.Kind = 0;
                                arq.TrnNo = item.TrnNo;
                                arq.TrnDate = item.TrnDate;
                                arq.TrnYear = item.TrnYear;
                                arq.StockCode = curr_stockcode;
                                arq.EngName = item.EngName;
                                arq.ItemCode = item.ItemCode;
                                arq.ArName = _hadd.ArName;
                                arq.ExpDate = item.ExpDate;
                                arq.ItemQuant = item.ItemQuant;
                                arq.ItemPrice = item.ItemPrice;
                                arq.UnitName = item.UnitName;
                                arq.ItemDtype = item.ItemDtype;
                                arq.ItemDesc = item.ItemDesc;
                                arq.GhaCode = _hadd.GhaCode;
                                arq.GhaMain = _hadd.GhaMain;
                                arq.GhaNum = _hadd.GhaNum;
                                arq.Transfer = false;
                                arq.Perc = _hadd.Perc;
                                arq.IncDec = _hadd.IncDec;
                                arq.TempPrice = 0;
                                arq.Notes = "";
                                db.Arquants.Add(arq);
                                _hadd.Transfer = true;
                            }

                        }

                    }
                    if (_hadd.Id == 0) await db.AddAsync(_hadd);
                    else db.Update(_hadd);

                    List<Dadd> olditems, all_items;
                    all_items = _hadd.Dadds.ToList();//initialization for the all
                    if (_hadd.Id != 0)
                    {

                        olditems = db.Dadds.Where(d => d.Haddid == _hadd.Id).ToList();
                        foreach (var oitem in olditems)
                        {
                            if (!(_hadd.Dadds.Any(d => d.ItemCode.Equals(oitem.ItemCode)))) all_items.Add(oitem);
                        }
                    }


                    await db.SaveChangesAsync();
                    
                    foreach (var item in all_items)//check balances after save 
                    {
                        decimal? ld_bal;
                        ld_bal = gt.GetBal(item.StockCode, item.ItemCode, item.TrnYear,db);//and check bal after  // ld_trnqty = db.Dadds.Where(d => d.TrnYear.Equals(item.TrnYear) && d.ItemCode.Equals(item.ItemCode) && d.StockCode.Equals(item.StockCode)).ToList().Sum(r => r.Kind == 1 ? r.ItemQuant : -1 * r.ItemQuant);
                        if (ld_bal < 0) {
                            gt.Mynotify("خطأ", "رصيد الصنف سوف يصبح سالب" + " " + item.ItemCode);
                            is_ok = false;
                            _hadd.Transfer = false;
                            transaction.Rollback();
                            return -1;

                        }
                        //post the bal 
                        db.Items.Where(i => i.StockCode.Equals(item.StockCode) && i.ItemCode.Equals(item.ItemCode)).FirstOrDefault().OpenbalQuant = ld_bal;
                        //update costs
                        gt.RecItemCost(item.StockCode, item.ItemCode, item.TrnDate, item.TrnYear, db);


                    }

                    await db.SaveChangesAsync();//again to save the bal and cost calc
                    if (is_ok)
                    {
                        transaction.Commit();
                        gt.Myinfo("تم", "تم تسجيل المستند");
                    }
                    else
                    {
                        transaction.Rollback();

                    }
                }
                catch (Exception e)
                {
                    gt.Mynotify("خطأ", "حدث خطأ أثناء التسجيل" + e.Message );
                    transaction.Rollback();
                    _hadd.Transfer = false;
                    throw;
                }
            }
        }
        return 0;
    }

    private bool on_predelete() {
        using (var db = dbf.CreateDbContext())
        {
            if (!db.Dadds.Any(d => d.StockCode.Equals(_hadd.StockCode) && d.TrnNo.Equals(_hadd.TrnNo) && d.Kind == kind && d.TrnYear.Equals(_hadd.TrnYear))) {
                gt.Mynotify("خطأ","لا يمكن الحذف لا يوجد بيانات فى أصل المستند");
                return false;
            }
        }
        return true;

    }

    private int onDelete()
    {
        if (!(on_predelete())) return -1;
        bool is_ok = true;
        using (var db = dbf.CreateDbContext())
        {
            using (var transaction = db.Database.BeginTransaction())
            {
                List<Dadd> olditems=new List<Dadd>();
                olditems = db.Dadds.Where(d => d.Haddid == _hadd.Id).ToList();
                try
                {
                    if (kind == 2)
                    {
                        //remove ohda//year
                        var x = db.Arquants.Where(a => a.TrnNo.Equals(_hadd.TrnNo) && a.StockCode.Equals(curr_stockcode) && a.Kind.Equals("0")).FirstOrDefault();
                        if (x != null) { db.Arquants.Remove(x); }
                    }

                    db.Hadds.Remove(_hadd);
                    db.SaveChanges();
                    foreach (var item in olditems)
                    {
                        decimal? ld_bal;
                        ld_bal = gt.GetBal(item.StockCode, item.ItemCode, item.TrnYear, db);//and check bal after  // ld_trnqty = db.Dadds.Where(d => d.TrnYear.Equals(item.TrnYear) && d.ItemCode.Equals(item.ItemCode) && d.StockCode.Equals(item.StockCode)).ToList().Sum(r => r.Kind == 1 ? r.ItemQuant : -1 * r.ItemQuant);
                        if (ld_bal < 0)
                        {
                            gt.Mynotify("خطأ", "رصيد الصنف سوف يصبح سالب" + " " + item.ItemCode);
                            is_ok = false;
                            _hadd.Transfer = false;
                            transaction.Rollback();
                            return -1;

                        }
                        //post the bal 
                        db.Items.Where(i => i.StockCode.Equals(item.StockCode) && i.ItemCode.Equals(item.ItemCode)).FirstOrDefault().OpenbalQuant = ld_bal;
                        //update costs
                        gt.RecItemCost(item.StockCode, item.ItemCode, item.TrnDate, item.TrnYear, db);
                    }

                    db.SaveChanges();//again to save the bal and cost calc
                    if (is_ok)
                    {
                        transaction.Commit();
                        gt.Myinfo("إعلام", "تم الحذف");
                    }
                    else
                    {
                        transaction.Rollback();

                    }
                }

                catch (Exception e)
                {
                    gt.Mynotify("خطأ", "حدث خطأ أثناءالحذف" + e.Message);
                    transaction.Rollback();
                    throw;
                }
            }
            return 0;
        }
    }

    private void onNew()
    {
        _hadd = new Hadd();
        _hadd.Kind = (byte)kind;
        _hadd.StockCode = curr_stockcode;
        _hadd.GhaCode = "01";
        _hadd.GhaName = "الادارات";
        _hadd.GhaMain = "";
        _hadd.GhaNum = "";
        _hadd.IncDec = 2;
        _hadd.Perc = 0;
        _hadd.TrnYear = "2018";//gt.get_current_year
        if (!string.IsNullOrEmpty(curr_stockcode))
        {
            _hadd.StockCode = curr_stockcode;
            int maxno=0;
            using (var db = dbf.CreateDbContext())
            {
                var records = db.Hadds.Where(a => a.StockCode == curr_stockcode && a.Kind == kind).OrderByDescending(a => a.TrnNo).FirstOrDefault();
                if (records !=null)
                    int.TryParse(records.TrnNo, out maxno);
            }
            maxno++ ;
            _hadd.TrnNo = maxno.ToString().PadLeft(10,'0');
        }
        _hadd.TrnDate = DateTime.Parse(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"));
        //  DateTime.ParseExact(DateTime.Now.ToString("MM/dd/yyyy hh:mm tt"), "", CultureInfo.InvariantCulture);
        StateHasChanged();
    }

    public async Task<int> f_MasterValidate(string name, dynamic arg) {
        string _value = "";
        switch (name.ToLower())
        {
            case "trnno":
                if (string.IsNullOrEmpty(_hadd.StockCode))
                {
                    await Task.Delay(1); //Magic!
                    StateHasChanged();
                    gt.Mynotify("خطأ", "يجب إختيار المخزن أولاً");
                    _hadd.TrnNo = "";
                    StateHasChanged();
                    return -1;
                }
                if (string.IsNullOrEmpty(_hadd.TrnYear))
                {
                    await Task.Delay(1); //Magic!
                    StateHasChanged();
                    gt.Mynotify("خطأ","يجب إختيار الفترة المالية");
                    _hadd.TrnNo = "";
                    StateHasChanged();
                    return -1;
                }
                if (string.IsNullOrEmpty(arg))
                {
                    await Task.Delay(1); //Magic!
                    StateHasChanged();
                    gt.Mynotify("خطأ", "يجب إدخال رقم المستند");
                    _hadd.TrnNo = "";
                    StateHasChanged();
                    return -1;
                }

                break;

            case "ghaname":
                if (string.IsNullOrEmpty((arg)) && kind == 2)
                {
                    gt.Mynotify("خطأ", "يجب إختيار الجهة بشكل سليم");
                    return -1 ;
                }
                break;

            case "arname":
                _hadd.ArName = "";
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _value = arg;
                _value = _value.Substring(0, Math.Min(5, _value.Length));
                _value = _value.PadLeft(5, '0');
                Arname ar;
                using (var db = dbf.CreateDbContext()) ar = db.Arnames.FirstOrDefault<Arname>(a => a.ArCode == _value);

                if (ar == null) {
                    gt.Mynotify("خطأ", "كود الموظف خطأ");
                    return -1;
                }
                _hadd.ArName = _value;


                break;
            case "trndate":
                DateTime dt, olddt;
                olddt = (DateTime)_hadd.TrnDate;
                if (DateTime.TryParse(arg.ToString(), out dt))
                {
                    using (var db = dbf.CreateDbContext())
                    {
                        if (dt.Date > (db.GlobVars.FirstOrDefault().Yearend).Value.Date || dt.Date < (db.GlobVars.FirstOrDefault().Yearstart).Value.Date)
                        {
                            await Task.Delay(1); //Magic!
                            StateHasChanged();
                            gt.Mynotify("خطأ", "التاريخ خارج نطاق السنة المالية");
                            _hadd.TrnDate = olddt;
                            return -1;
                        }
                    }
                }

                break;

            case "docnon":

                if (string.IsNullOrEmpty(_hadd.StockCode))
                {
                    await Task.Delay(1); //Magic!
                    StateHasChanged();
                    gt.Mynotify("خطأ", "يجب إختيار المخزن أولاً");
                    _hadd.DocNoN = "";
                    StateHasChanged();
                    return -1;
                }

                string _docnon = (string)arg;
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _docnon = _docnon.Substring(0, Math.Min(10, _docnon.Length));
                _docnon = _docnon.PadLeft(10, '0');
                using (var db = dbf.CreateDbContext())
                {
                    if (!db.Hadds.Where(a => a.TrnNo == _docnon && a.StockCode == curr_stockcode && a.Kind == 1 && a.TrnYear==_hadd.TrnYear).Any())
                    {
                        gt.Mynotify("خطأ", "رقم مستند غير موجود ");
                        return -1;
                    }
                }
                _hadd.DocNoN = _docnon;
                break;
            default: break;
        }
        return 0;
    }

    public async Task f_onchange(string name, dynamic arg)
    {
        string _value = "";
        switch (name.ToLower())
        {
            case "stockcode":
                _hadd.StockCode = "";
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _value = arg;
                _value = _value.Substring(0, Math.Min(2, _value.Length));
                _value = _value.PadLeft(2, '0');
                using (var db = dbf.CreateDbContext())
                {
                    Stock st;
                    st = db.Stocks.FirstOrDefault<Stock>(a => a.StockCode == _value);
                    if (st != null)
                    {
                        curr_stockcode = _value;
                        onNew();
                        _hadd.StockCode = _value;
                    }
                }
                StateHasChanged();
                break;

            case "trnno":
                if (await f_MasterValidate(name,arg) < 0 ) return;
                string _trnno = (string)arg;
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _trnno = _trnno.Substring(0, Math.Min(10, _trnno.Length));
                _trnno = _trnno.PadLeft(10, '0');
                string _trnyear;
                using (var db = dbf.CreateDbContext())
                {
                    _trnyear = db.Hadds.FirstOrDefault().TrnYear; //gt.user.period;//to be modified
                    _hadd = db.Hadds.Where(a => a.TrnNo == _trnno && a.StockCode == curr_stockcode && a.Kind == kind && a.TrnYear==_trnyear ).Include(a => a.Dadds).ToList().FirstOrDefault();
                    if (_hadd == null) {
                        onNew();
                        _hadd.StockCode = curr_stockcode;
                        _hadd.TrnNo = arg;
                        _hadd.GhaCode = "01";
                        _hadd.GhaName = "الادارات";
                        _hadd.GhaMain = "";
                        _hadd.GhaNum = "";
                    }
                    else {
                        list_tklf_main = db.Tklfmains.Where(a => a.KindCode == _hadd.GhaCode).ToList();
                        list_tklf_sub = db.Tklfsubs.Where(a => a.KindCode == _hadd.GhaCode).ToList();
                        shownum = !(_hadd.GhaCode == "01" || (_hadd.GhaCode == "02" && _hadd.GhaName == "أقســـــام"));
                        LGHA_CODE = _hadd.GhaCode;
                    }
                }

                break;

            case "docnon":
                if (kind != 2) return;
                if (await f_MasterValidate(name, arg) < 0) return;
                break;

            case "ghaname":
                if (await f_MasterValidate(name, arg) < 0) return;
                switch (arg)
                {
                    case "الادارات": LGHA_CODE = "01"; shownum = false; break;
                    case "رســـائـــل": LGHA_CODE = "02"; shownum = true; break;
                    case "أقســـــام": LGHA_CODE = "02"; shownum = false; _hadd.GhaNum = null; break;
                    case "مزارع وجهات": LGHA_CODE = "04"; shownum = true; break;
                    case "Sمشروعات خطة 9 فردى": LGHA_CODE = "05"; shownum = true; break;
                    case "التكنولوجيا القادمة من الخارج TT": LGHA_CODE = "07"; shownum = true; break;
                    case "خطة التكميلى MP": LGHA_CODE = "06"; shownum = true; break;
                    case "RSمشروعات قش الارز": LGHA_CODE = "08"; shownum = true; break;
                    case "الخطة المصرية الإيطالية IT": LGHA_CODE = "08"; shownum = true; break;
                    case "الخطة الرومانية RO": LGHA_CODE = "11"; shownum = true; break;
                    case "مشروعات الخطة البحثية الثانية عشر E": LGHA_CODE = "12"; shownum = true; break;
                    case "محاور الخطة البحثية الثانية عشر": LGHA_CODE = "05"; shownum = true; break;
                    default: break;
                }
                _hadd.GhaCode = LGHA_CODE;
                _hadd.GhaMain = "";
                _hadd.GhaNum = "";
                using (var db = dbf.CreateDbContext()) {
                    list_tklf_main = db.Tklfmains.Where(a => a.KindCode == LGHA_CODE).ToList();
                    list_tklf_sub = db.Tklfsubs.Where(a => a.KindCode == LGHA_CODE).ToList();
                }
                break;

            case "ghamain":
                _hadd.GhaNum = "";
                break;
            case "ghanum":
                string ls_geha_main;
                if (string.IsNullOrWhiteSpace(arg)) {
                    gt.Mynotify("خطأ", "يجب إدخال كود الجهة بشكل سليم");
                    return;
                }

                ls_geha_main = list_tklf_sub.Where(a => a.KindCode == LGHA_CODE && a.TklfsubCode == arg).FirstOrDefault().TklfCode;
                _hadd.GhaMain = ls_geha_main;
                break;
            case "trn_date":
                if (await f_MasterValidate(name, arg) < 0) return;
                DateTime dt;
                if (DateTime.TryParse(arg.ToString(), out dt)) _hadd.TrnDate = dt;
                break;
            case "incdec":
                if (arg != null ) _hadd.IncDec = (byte)arg;
                break;
            case "arname":
                if (await f_MasterValidate(name, arg) < 0) return;
                StateHasChanged();
                break;
            default: break;

        }
    }

    private async Task f_ondblclick(string name)
    {
        Dictionary<string, object> ret;
        switch (name.ToLower())
        {
            case "arname":
                ret = await ds.OpenAsync<GModalList<Arname>>("",
             new Dictionary<string, object>() { { "title","قائمة الأفراد" }, { "scollist", "arcode,arname1,nid,work" }, { "colheads", "الكود,الإسم,الرقم القومى,العمل" } },
             new DialogOptions() { ShowTitle = false, Width = "950px", Height = "400px", Resizable = true, Draggable = true });
                if (ret != null)
                {
                    if (!((bool)ret["status"])) return;
                    List<Arname> val = ret["result"] as List<Arname>;
                    _hadd.ArName = val[0].ArCode;
                    await f_onchange("arname", val[0].ArCode);
                }
                break;
            case "stockcode":
                ret = await ds.OpenAsync<GModalList<Stock>>("",
            new Dictionary<string, object>() { { "title", "قائمة المخازن" }, { "scollist", "stockcode,stockname" }, { "colheads", "كود المخزن ,إسم المخزن" } },
            new DialogOptions() { ShowTitle = false, Width = "400px", Height = "400px", Resizable = true, Draggable = true });
                if (ret != null)
                {
                    if (!((bool)ret["status"])) return;
                    List<Stock> val = ret["result"] as List<Stock>;
                    _hadd.StockCode = val[0].StockCode;
                    await f_onchange("stockcode", val[0].StockCode);
                }
                break;

            case "trnno":
                //List<Hadd> ll = new List<Hadd>();
                //using (var db = dbf.CreateDbContext())
                //{
                //    ll = db.Hadds.Where(h => h.StockCode == _hadd.StockCode & h.Kind == kind).ToList();
                //}
                //        ret = await ds.OpenAsync<GModalList<Hadd>>("",
                //new Dictionary<string, object>() { { "scollist", "TrnNo,TrnDate" }, { "colheads", "رقم المستند,تاريخ المستند" }, { "data", ll } },
                //new DialogOptions() { ShowTitle = false, Width = "400px", Height = "400px", Resizable = true, Draggable = true });
                //        if (ret != null)
                //        {
                //            if (!((bool)ret["status"])) return;
                //            List<Hadd> val = ret["result"] as List<Hadd>;
                //            _hadd.TrnNo = val[0].TrnNo;
                //            await f_onchange("trnno", _hadd.TrnNo);
                //        }

                ret = await ds.OpenAsync<ModaltrnsList>("",
                    new Dictionary<string, object>() { { "stock_code", _hadd.StockCode }, { "trns_kind", _hadd.Kind.ToString() } },
                     new DialogOptions() { ShowTitle = false, Width = "900px", Height = "400px", Resizable = false, Draggable = true });


                if (ret != null)   {
                    if (!((bool)ret["status"])) return;
                    Hadd val = ret["result"] as Hadd;
                    _hadd.TrnNo = val.TrnNo;
                    _hadd.TrnYear = val.TrnYear;
                    await f_onchange("trnno", _hadd.TrnNo);
                }
                break;

            case "docno":
                ret = await ds.OpenAsync<ModaltrnsList>("",
                new Dictionary<string, object>() { { "stock_code", _hadd.StockCode }, { "trns_kind", "1" } },
                new DialogOptions() { ShowTitle = false, Width = "900px", Height = "400px", Resizable = true, Draggable = true });
                if (ret != null) {
                    if (!((bool)ret["status"])) return;
                    Hadd val = ret["result"] as Hadd;
                    _hadd.DocNo = val.TrnNo;
                    await f_onchange("docno", _hadd.DocNo);
                }
                break;
            default: break;
        }

    }

    public void onAddNewItem(){
        Dadd d = new Dadd();
        if (kind == 2) d.ItemPrice = 0;//initialization
        d.Kind = (byte)kind;
        d.TrnNo = _hadd.TrnNo;
        d.TrnYear = _hadd.TrnYear;
        d.TrnDate = _hadd.TrnDate;
        d.StockCode = _hadd.StockCode;
        d.IncDec = _hadd.IncDec;
        d.Perc = _hadd.Perc;

        _hadd.Dadds.Add(d);
    }

    public async Task f_onchangedetail(string name, dynamic arg, int row){
        string _value = "";
        switch (name.ToLower())
        {
            case "itemcode":
                _hadd.Dadds.ToList().ElementAt(row).ItemCode = "";
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _value = arg;
                _value = _value.Substring(0, Math.Min(5, _value.Length));
                _value = _value.PadLeft(5, '0');
                Item item;
                using (var db = dbf.CreateDbContext()) item = db.Items.FirstOrDefault<Item>(a => a.ItemCode == _value && a.StockCode == curr_stockcode);
                if (item == null) {
                    _hadd.Dadds.ToList().ElementAt(row).ItemCode = "";
                    gt.Mynotify("خطأ","الصنف غير معرف");
                    return;
                }
                //check repeatation of items
                for (int i = 0; i < _hadd.Dadds.Count(); i++)
                {
                    if (i == row) continue;
                    if (_hadd.Dadds.ToList().ElementAt(i).ItemCode.Equals(_value)) {

                        gt.Mynotify("خطأ", "سبق إدخال الصنف غير مسموح بتكرار الصنف");
                        _hadd.Dadds.ToList().RemoveAt(row);
                        return;
                    }
                }
                //
                //adjust price according to add  docono
                if (kind == 2) {
                    if (!string.IsNullOrWhiteSpace(_hadd.DocNoN)) {
                        double? ld_addprice;
                        using (var db = dbf.CreateDbContext())
                        {
                            ld_addprice = db.Hadds.
                                Where(h => h.Kind == 1 && h.TrnNo.Equals(_hadd.DocNoN) && h.StockCode.Equals(curr_stockcode)).
                               FirstOrDefault().Dadds.ToList().
                               Where(d => d.ItemCode.Equals(_value)).FirstOrDefault().ItemPrice;

                        }
                        _hadd.Dadds.ToList().ElementAt(row).ItemPrice = ld_addprice;
                    }
                    else {//get the avg before time
                        double? ld_cost ;
                        ld_cost = gt.GetAvgB4Time(_value, curr_stockcode, _hadd.TrnDate);
                        _hadd.Dadds.ToList().ElementAt(row).ItemPrice = ld_cost;


                    }
                }
                //
                _hadd.Dadds.ToList().ElementAt(row).ItemCode = item.ItemCode;
                _hadd.Dadds.ToList().ElementAt(row).EngName = item.EngName;
                _hadd.Dadds.ToList().ElementAt(row).UnitName = item.UnitName;
                _hadd.Dadds.ToList().ElementAt(row).ItemDesc =(byte?) item.ItemDesc;
                _hadd.Dadds.ToList().ElementAt(row).ItemDtype =(byte?) item.ItemDtype;
                _hadd.Dadds.ToList().ElementAt(row).ExpDate = item.ExpDate;
                _hadd.Dadds.ToList().ElementAt(row).ItemQuant = 0;
                _hadd.Dadds.ToList().ElementAt(row).Transfer = false ;

                StateHasChanged();
                break;


            case "itemquant":
                decimal? curr_bal=0m,org_qty=0m,diff=0m ;

                using (var db = dbf.CreateDbContext()) {
                    curr_bal = db.Items.Where(i => i.StockCode.Equals(curr_stockcode) && i.ItemCode.Equals(_hadd.Dadds.ToList().ElementAt(row).ItemCode)).FirstOrDefault().OpenbalQuant;
                    if (curr_bal == null) curr_bal = 0;
                    Hadd h = db.Hadds.Where(h => h.Kind == kind && h.TrnNo.Equals(_hadd.TrnNo) && h.StockCode.Equals(curr_stockcode)).Include(a=>a.Dadds).FirstOrDefault();
                    if (h != null) {
                        Dadd d = h.Dadds.Where(d => d.ItemCode.Equals(_hadd.Dadds.ToList().ElementAt(row).ItemCode)).FirstOrDefault();
                        if (d!=null) org_qty= (decimal?) d.ItemQuant;
                    }
                    if (org_qty==null) org_qty = 0;

                    diff = Convert.ToDecimal( arg) - org_qty;
                    if (kind == 1 && ((curr_bal + diff) < 0 ) ) {
                        gt.Mynotify("خطأ", "بتسجيل المستند سوف يصبح الرصيد سالب"+ "الصنف:"
                            +_hadd.Dadds.ElementAt(row).ItemCode +" الرصيد  "+ (curr_bal + diff).ToString() );

                    }
                    if (kind == 2 && ((curr_bal - diff) < 0))
                    {
                        gt.Mynotify("خطأ", "بتسجيل المستند سوف يصبح الرصيد سالب" + "الصنف:"
                            + _hadd.Dadds.ElementAt(row).ItemCode + " الرصيد  " + (curr_bal - diff).ToString());
                    }
                }
                break;

            case "itemprice":
                if (Convert.ToDecimal(arg) == 0) {
                    gt.Mynotify("خطأ", "أدخل السعر بشكل سليم");
                    return;
                }
                break;
        }
    }

    private async Task f_ondblclickdetail(string name, int row){
        Dictionary<string, object> ret;
        List<Item>   itemlist;
        switch (name.ToLower()){
            case "itemcode":
                using (var db = dbf.CreateDbContext()) itemlist = db.Items.Where(i => i.StockCode == _hadd.StockCode).ToList();
                ret = await ds.OpenAsync<GModalList<Item>>("",new Dictionary<string, object>() { { "title", "قائمة الأصناف" }
                , { "scollist", "itemcode,engname" },{ "colheads", "كود الصنف,إسم الصنف" }, { "data", itemlist } }
                ,new DialogOptions() { ShowTitle = false, Width = "400px", Height = "400px", Resizable = true, Draggable = true });
                if (ret != null){
                    if (!((bool)ret["status"])) return;
                    List<Item> val = ret["result"] as List<Item>;
                    _hadd.Dadds.ToList().ElementAt(row).ItemCode = val[0].ItemCode;
                    await f_onchangedetail("itemcode", val[0].ItemCode, row );
                }
                break;
            default: break;
        }
    }

    void on_cbTaxClicked(){
        if (_hadd.IncDec == null) {
            gt.Mynotify("خطأ", "أعد إدخال نوع الضريبة بشكل سليم");
            return;
        }
        if (_hadd.Perc == null)
        {
            gt.Mynotify("خطأ", "أعد إدخال نسبة الضريبة بشكل سليم");
            return;
        }

        foreach (var item in _hadd.Dadds)
        {
            if (item.ItemQuant == 0 || item.ItemQuant == null) {
                gt.Mynotify("خطأ", "ادخل الكمية" + " "+ "الصنف :"+item.ItemCode);
                return;
            }

            if (item.ItemPrice == 0 || item.ItemPrice == null)
            {
                gt.Mynotify("خطأ", "ادخل السعر" + " " + "الصنف :" + item.ItemCode);
                return;
            }
            double? adeduc=0d;
            if (_hadd.IncDec == 1) {
                adeduc = (_hadd.Perc / 100) *  item.ItemPrice ;
                item.ItemPrice = item.ItemPrice - adeduc;

            }

            if (_hadd.IncDec == 2)
            {
                adeduc = (_hadd.Perc / 100) * item.ItemPrice;
                item.ItemPrice = item.ItemPrice + adeduc;
            }



        }

    }

    async Task on_cbOhdaClicked(){
        if (!String.IsNullOrWhiteSpace(_hadd.ArName)) {
            var   ret = await ds.OpenAsync<ModalManOhda>("",
            new Dictionary<string, object>() { { "arg_arcode", _hadd.ArName} },
            new DialogOptions() { ShowTitle = false, Width = "900px", Height = "400px", Resizable = true, Draggable = true });
            if (ret != null){
                if (!((bool)ret["status"])) return;
                List<Arquant> val = ret["result"] as List<Arquant>;
            }
        }
    }

    void OnSubmit(Hadd model){
        Console.WriteLine(model);
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args){ }

    #endregion code
}






