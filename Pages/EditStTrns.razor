@page "/editsttrns/{kind:int}"
@*@page "/editsstrns/{kind:int}/{id:int}"*@
@inject IDbContextFactory<nrcwebContext> dbf;
@inject DialogService ds
@inject NotificationService ns

    <style>
        table > thead > tr {
            position: sticky;
            top: 0;
            z-index: 2;
            background: white;
        }
      
    </style>

<div class="card  w-auto h-auto" >
  
    <div class="card-header alert alert-primary h3 text-center m-0 p-0 ">
        @_hadd.StockCode
        @_hadd.Kind
        @_hadd.TrnNo
        @(_hadd.Kind == 1 ? "إذن إضافة" : "إذن صرف") - @(_hadd.Id == 0 ? "جديد" : "تعديل")
    </div>
    <div class="card-body">
        <RadzenTemplateForm TItem="Hadd" Data=@_hadd InvalidSubmit=@OnInvalidSubmit>

            <div class="form-group  row  ">
                <Label class="btn-outline-primary col-sm-2" @onclick="@(async ()=>await f_ondblclick("stockcode"))">كود المخزن ...</Label>
                <span>
                    <RadzenMask Mask=@stockcode_mask Pattern="[^0-9]" style="display: block ; background-color:lemonchiffon" Name="StockCode"
                                @bind-Value=@_hadd.StockCode Change=@(args => f_onchange( "stockcode",args))
                                @ondblclick="@(async ()=>await f_ondblclick("stockcode"))" />
                    <RadzenRequiredValidator Component="StockCode" Text="يجب إدخال كود المخزن" Style="position: absolute" />
                    <RadzenRegexValidator Component="StockCode" Text="كود المخزن رقمين" Pattern="\d{2}" Style="position: absolute" />
                </span>

            </div>

            <div class="form-group  row  ">
                <Label class="btn-outline-primary col-sm-2" @onclick="@(async ()=>await f_ondblclick("trnno"))">رقم المستند ...</Label>
                <span>
                    <RadzenMask Mask=@trn_no_mask Pattern="[^0-9]" style="display: block ; background-color:lemonchiffon" Name="trn_no"
                                @bind-Value=@_hadd.TrnNo Change=@(args => f_onchange( "trnno",args))
                                @ondblclick="@(async ()=>await f_ondblclick("trnno"))" />
                    <RadzenRequiredValidator Component="trn_no" Text="يجب إدخال رقم المستند" Style="position: absolute" />
                    <RadzenRegexValidator Component="trn_no" Text="رقم المستند 10 أرقام" Pattern="\d{10}" Style="position: absolute" />
                </span>

            </div>


            <div class="form-group row">
                <RadzenLabel Text="تاريخ المستند" class="col-sm-2" />
                <RadzenDatePicker Name="trn_date" TValue=DateTime ShowTime="true" Value=_hadd.TrnDate HourFormat="12"
                                  DateFormat="dd/MM/yyyy hh:mm:ss tt" Change=@(args=>f_onchange("trn_date",args )) />
                <RadzenRegexValidator Component="trn_date" Text="يجب إدخال التاريخ بشكل سليم" Pattern="dd/MM/yyyy hh:mm:ss tt" Style="position: absolute" />

            </div>

            <div class="form-group row">
                <label for="ghaname" class="col-sm-2">كود الجهة الطالبة</label>
                <RadzenTextBox style="display: block" Name="ghaname" @bind-Value=@_hadd.GhaName Change=@(args => f_onchange("ghaname",args )) />
            </div>

            <div class="form-group row">
                <RadzenLabel Text="إسم الجهة" class="col-sm-2" />
                <div class="col-sm-10">
                    <div class="row">
                        <RadzenTextBox class="col-sm-8" style="display: block" Name="GhaMain" @bind-Value=@_hadd.GhaMain Change=@(args => f_onchange( "GhaMain",args)) />
                    </div>
                    <div class="row">
                        <RadzenRequiredValidator Component="GhaMain" Text="يجب إدخال وصف المخزن" />
                    </div>
                </div>



            </div>





        </RadzenTemplateForm>

        <div style=" height:250px ;font-size:small; overflow: auto; ">
            <table class="table table-responsive  table-hover table-bordered  ">
                <thead class="font-weight-bold">
                    <tr><th class="col-sm-2"> كود الصنف</th> <th class="col-sm-3"> إسم الصنف</th>  <th class="col-sm-2">الوحدة</th><th class="col-sm-2">الكمية</th> <th class="col-sm-2"> السعر</th> <th class="col-sm-1"> حذف</th> </tr>
                </thead>
                <tbody>
                    @foreach (var item in _hadd.Dadds)
                    {

                    <tr style="padding:0;margin:0">
                        <td style="padding:0;margin:0"> <RadzenTextBox form="itemcode"  @bind-Value="@item.ItemCode" /></td>
                        <td style="padding:0;margin:0">@item.EngName</td>
                          <td style="padding:0;margin:0">  <RadzenTextBox form="unitname" class="form-control-sm" @bind-Value="@item.UnitName" /></td>
                        <td style="padding:0;margin:0"><RadzenNumeric form="itemquant" class="form-control-sm" @bind-Value="@item.ItemQuant" /></td>
                        <td style="padding:0;margin:0"><RadzenNumeric form="itemprice" class="form-control-sm" @bind-Value="@item.ItemPrice" /></td>
                        <td style="padding:0;margin:0"><button class="btn btn-primary btn-sm" @onclick="()=> { _hadd.Dadds.Remove(item); } ">&times;</button></td>
                    </tr>
                        
                    }
                </tbody>
            </table>
        </div>


    </div>
    <div class="card-footer m-0 p-1">
        <div class="row text-center ">
            <div class="col-3 ">
                <RadzenButton class="btn-dark  " ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" @onclick="onSave">تسجيل</RadzenButton>
            </div>
            <divclass ="col-3">
                <button class="btn btn-primary" @onclick="onAddNewItem">إضافة صنف</button>
            </divclass>
            <div class="col-3 ">
                <button class="btn btn-outline-dark " @onclick="onNew">جديد</button>
            </div>
            <div class="col-3 " >
                <button class="btn  btn-outline-primary " @onclick="onDelete">حذف</button>
            </div>
        </div>
    </div>

   


</div>

@code {
    [Parameter]
    public int? id { get; set; }
    [Parameter]
    public int kind { get; set; }
    private Hadd _hadd = new Hadd();
    private string stockcode_mask = "**";
    private string trn_no_mask = "**********";
    private string old_stockcode;
    protected override void OnInitialized()
    {
        if (id != null) using (var db = dbf.CreateDbContext()) _hadd = db.Hadds.Where(r => r.Id == id).FirstOrDefault();
        else onNew();

    }
    private async Task<int> onSave()
    {
        if (!on_presave()) return -1;
        try
        {
            using (var db = dbf.CreateDbContext())
            {
                if (_hadd.Id == 0)
                    await db.AddAsync(_hadd);
                else
                    db.Update(_hadd);
                await db.SaveChangesAsync();
            }
        }
        catch (Exception)
        {
            throw;
        }
        return 0;

    }
    private bool on_presave()
    {
        return true;
    }
    private void onDelete()
    {
        try
        {
            using (var db = dbf.CreateDbContext())
                if (_hadd.Id != 0)
                {
                    db.Remove(_hadd);
                    if (db.SaveChanges() > 0) onNew();
                }

        }
        catch (DbUpdateException e)
        {

            throw e;
        }
    }
    private void onNew()
    {


        _hadd = new Hadd();
        _hadd.Kind = (byte)kind;
        _hadd.StockCode = old_stockcode;
        if (!string.IsNullOrEmpty(old_stockcode))
        {
            _hadd.StockCode = old_stockcode;
            int maxno;
            using (var db = dbf.CreateDbContext())
            {
                int.TryParse(db.Hadds.Where(a => a.StockCode == old_stockcode).OrderByDescending(a => a.TrnNo).FirstOrDefault().TrnNo, out maxno);
            }
            maxno++;
            _hadd.TrnNo = maxno.ToString();
        }

        _hadd.TrnDate = DateTime.Parse(DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss tt"));
        //  DateTime.ParseExact(DateTime.Now.ToString("MM/dd/yyyy hh:mm tt"), "", CultureInfo.InvariantCulture);

    }
    public async Task f_onchange(string name, dynamic arg)
    {
        string _value = "";
        switch (name.ToLower())
        {
            case "stockcode":
                _hadd.StockCode = "";
                await Task.Delay(1); //Magic!
                StateHasChanged();
                _value = arg;
                _value = _value.Substring(0, Math.Min(2, _value.Length));
                _value = _value.Length == 1 ? String.Concat("0", _value) : _value;
                using (var db = dbf.CreateDbContext())
                {
                    Stock st;
                    st = db.Stocks.FirstOrDefault<Stock>(a => a.StockCode == _value);
                    if (st != null)
                    {
                        old_stockcode = _value;
                        onNew();
                        _hadd.StockCode = _value;

                    }
                }
                StateHasChanged();
                break;

            case "trnno":
                if (string.IsNullOrEmpty(_hadd.StockCode))
                {
                    await Task.Delay(1); //Magic!
                    StateHasChanged();
                    ns.Notify(new NotificationMessage() { Detail = "يجب إختيار المخزن أولاً" });
                    _hadd.TrnNo = "";
                    StateHasChanged();
                }
                else
                {
                    string _trnno =(string) arg;
                    using (var db = dbf.CreateDbContext())
                    {
                        _hadd=db.Hadds.Where(a => a.TrnNo == _trnno && a.StockCode == old_stockcode &&  a.Kind == kind).Include(a=>a.Dadds).ToList().FirstOrDefault();
                        if (_hadd == null)
                        {
                            onNew();
                            _hadd.StockCode = old_stockcode;
                            _hadd.TrnNo = arg;
                        }
                    }

                }


                break;

            //case "stockname":
            //    _stock.StockName = "";
            //    await Task.Delay(1); //Magic!
            //    StateHasChanged();
            //    _value = arg;
            //    if (string.IsNullOrEmpty(_value.ToString()))
            //    {
            //        // _notifi.Notify((new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "", Detail = "يجب إدخال الإسم", Duration = -1 }));
            //        //  gtool.Mynotify("خطأ", "يجب إدخال وصف المخزن");
            //    }
            //    _value = _value.Substring(0, Math.Min(50, _value.Length));
            //    _stock.StockName = _value;
            //    StateHasChanged();
            //    break;
            case "trn_date":
                DateTime dt;
                if (DateTime.TryParse(arg.ToString(), out dt)) { _hadd.TrnDate = dt; }
                break;
            default: break;
        }
    }
    void OnSubmit(Hadd model)
    {
        Console.WriteLine(model);
    }
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    { }

    private async Task f_ondblclick(string name)
    {
        Dictionary<string, object> ret;
        switch (name.ToLower())
        {
            case "stockcode":
                ret = await ds.OpenAsync<GModalList<Stock>>("",
            new Dictionary<string, object>() { { "title", "قائمة المخازن" },{  "scollist", "stockcode,stockname"  }, { "colheads", "كود المخزن ,إسم المخزن" } },
            new DialogOptions() { ShowTitle = false, Width = "400px", Height = "400px", Resizable = true, Draggable = true });
                if (ret != null)
                {
                    if (!((bool)ret["status"])) return;
                    List<Stock> val = ret["result"] as List<Stock>;
                    _hadd.StockCode = val[0].StockCode;
                    await f_onchange("stockcode", val[0].StockCode);
                }
                break;

            case "trnno":
                List<Hadd> ll = new List<Hadd>();
                using (var db = dbf.CreateDbContext())
                {
                    ll = db.Hadds.Where(h=>h.StockCode == _hadd.StockCode & h.Kind==kind).ToList();
                }
                ret = await ds.OpenAsync<GModalList<Hadd>>("",
        new Dictionary<string, object>() { { "scollist", "TrnNo,TrnDate" },{"colheads","رقم المستند,تاريخ المستند" },{ "data", ll } },
        new DialogOptions() { ShowTitle = false, Width = "400px", Height = "400px", Resizable = true, Draggable = true });
                if (ret != null)
                {
                    if (!((bool)ret["status"])) return;
                    List<Hadd> val = ret["result"] as List<Hadd>;
                    _hadd.TrnNo = val[0].TrnNo;
                    await f_onchange("trnno", _hadd.TrnNo);
                }
                break;
            default: break;
        }

    }

    public void onAddNewItem()
    {
        Dadd d = new Dadd();
        _hadd.Dadds.Add(d);
       
    }


}






