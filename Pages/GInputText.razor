@typeparam T
@inject IDbContextFactory<nrcwebContext> dbf
@using System.Reflection
@using System.ComponentModel
@using System.Linq.Expressions;
<InputText @bind-Value="InputValue" @onchange=@(args => f_onchange("inputvalue", args)) />
<span>@DisplayName</span>

@code {
    private string InputValue { get; set; } = string.Empty;
    public string DisplayName { get; set; } = string.Empty;
    public T selectedrow { get; set; }
    private long codelength { get; set; }
    [Parameter]
    public string codeName { get; set; } = "code";
    [Parameter]
    public string descrName { get; set; } = "name";

    public async Task f_onchange(string name, dynamic arg)
    {
        string _value = "";
        switch (name.ToLower())
        {
            case "inputvlaue":

                await Task.Delay(1); //Magic!
                StateHasChanged();
                _value = arg;
                _value = _value.Substring(0, Math.Min(2, _value.Length));
                _value = _value.PadLeft(2, '0');
                using (var db = dbf.CreateDbContext())
                {
                    var   data = db.Set<T>().AsQueryable();
                    var parameter = Expression.Parameter(typeof(T), "entity");
                    var property = Expression.Property(parameter, codeName);// Get the property to filter on
                    var constant = Expression.Constant(_value);// Create the constant to compare to
                    var equality = Expression.Equal(property, constant);// Create the equality expression (entity.ColumnName == colValue)
                    var predicate = Expression.Lambda<Func<T, bool>>(equality, parameter);// Build the lambda expression for the predicate
                    T selectedrow= data.Where(predicate).ToList().FirstOrDefault();
                    DisplayName = selectedrow.GetType().GetProperty(descrName).ToString();
                }
                StateHasChanged();
                break;
               
            default: break;


        }
    }
}