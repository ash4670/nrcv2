@page "/editbudget/{formarg:int}"
@inject IDbContextFactory<nrcwebContext> dbf;
@inject DialogService DialogService
@inject Gtools gtool

<div class="card">
    <div class="card-header alert alert-primary h3 text-center ">
        تعريف  @PageTitle
    </div>
    <div class="card-body">
        <div class="  row  ">
            <RadzenDropDown @bind-Value=@parentcode Data=@Parenthelplist TextProperty="@nameof(Tklfmain.TklfName)" ValueProperty="@nameof(Tklfmain.TklfCode)"
                            @bind-SearchText=SearchText FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                            Change=@(args => f_onchange("tklfcode", args))
                            @ondblclick="@(async () => await f_ondblclick("tklfcode"))"
                            Style="width: 100%; max-width: 400px; display:block;" Name="DropDownParent" />


            <RadzenRequiredValidator Component="DropDownParent" Text="يجب إدخال الكود" Style="position: absolute" />

        </div>

        <div class="  row  ">
            <div class="col-6">
                c1
            </div>
            <div class="col-6">
                c2
            </div>

        </div>


        <div class="card-footer">
            <div class="row text-center">
                <div class="col-4">
                    <RadzenButton Text="تسجيل"></RadzenButton>
                </div>
            </div>
        </div>

    </div>
</div>



@code {
        public string PageTitle { get; set; } = "";
        public string ikind_code { get; set; }
        public string MasterText { get; set; }
        public string SubText { get; set; }


        List<Tklfmain> Parenthelplist = new();
        List<Tklfsub> _sublist = new();
        public string parentcode { get; set; } = "" ;
        public string SearchText = "";

        [Parameter]
        public int formarg { get; set; }

        protected override void OnParametersSet()
        {
            switch (formarg)
            {
                case 2:
                    ikind_code = "02";
                    PageTitle = "ميزانية الرسائل";
                    MasterText = "كود القسم";
                    break;
                case 4:
                    ikind_code = "04";
                    PageTitle = " ميزانية المعامل و المزارع";
                    MasterText = "اسم مزرعة / معمل";
                    break;
                case 5:
                    ikind_code = "05";
                    PageTitle = "ميزانية أكواد مشروعات الخطة الثالثة عشر";
                    MasterText = "كود المحور";
                    break;
                case 6:
                    ikind_code = "06";
                    PageTitle = "ميزانية مشروعات الخطة التكميليه MP";
                    break;
                case 12:
                    ikind_code = "12";
                    PageTitle = "ميزانية مشروعات الخطة E";
                    break;

                default:
                    break;
            }

            using (var db = dbf.CreateDbContext()) Parenthelplist = db.Tklfmains.Where(t => t.KindCode == ikind_code).ToList();

            //onNew();
            base.OnParametersSet();
        }

        public async Task f_onchange(string name, dynamic arg)
        {
            string _value = "";
            switch (name.ToLower())
            {
                case "tklfcode":
                    //this is the parent قسم
                    await Task.Delay(1); //Magic!
                    StateHasChanged();
                    _value = arg;
                    if (string.IsNullOrEmpty(_value)) return;
                    using (var db = dbf.CreateDbContext())
                        _sublist = db.Tklfmains.FirstOrDefault<Tklfmain>(a => a.KindCode == ikind_code && a.TklfCode == _value).Tklfsubs.ToList();
                    if (_sublist != null)
                    {
                        //filter sub list
                        //select first row
                        // filter last list for first row
                    }
                    else
                        gtool.Mynotify("خطأ", MasterText + " غير معرف");
                    StateHasChanged();
                    break;



                default: break;
            }
        }

        private async Task f_ondblclick(string colname)
        {
            switch (colname.ToLower())
            {

                case "outcode":
                    List<Out> Outhelplist = new List<Out>();
                    using (var db = dbf.CreateDbContext()) Outhelplist = db.Outs.ToList();

                    Dictionary<string, object> ret = await DialogService.OpenAsync<GModalList<Out>>("",
                new Dictionary<string, object>() { { "data", Outhelplist }, { "title"," قائمة بنود المصروفات " }, { "scollist", "outcode,outname" }, { "colheads", "الكود,الإسم"} },
                new DialogOptions() { ShowTitle = false, Width = "800px", Height = "400px", Resizable = true, Draggable = true });

                    if (ret != null)
                    {
                        if (!((bool)ret["status"])) return;
                        List<Out> val = ret["result"] as List<Out>;
                        //_tklfdetaillist.outCode = val[0].OutCode;
                        //await f_onchange(colname.ToLower(), val[0].TklfsubCode);
                    }
                    break;
                default: break;
            }

        }

        private async Task OnSubmit(Tklfsub model) => await onSave();

        private async Task<int> onSave()
        {
            if (!on_presave()) return -1;
            //try
            //{
            //    using (var db = dbf.CreateDbContext())
            //    {
            //        if (_tklfdetail.Id == 0)
            //            await db.AddAsync(_tklfdetail);
            //        else
            //            db.Update(_tklfdetaiu);

            //        await db.SaveChangesAsync();
            //    }
            //}
            //catch (Exception)
            //{
            //    throw;
            //}
            return 0;
        }

        private bool on_presave()
        {

            //if (string.IsNullOrEmpty(_tklfsub.TklfCode) || string.IsNullOrEmpty(_tklfsub.TklfsubCode) || string.IsNullOrEmpty(_tklfsub.TklfsubName)
            //    || _tklfsub.Tklfmainid == 0)
            //{
            //    gtool.Mynotify("خطأ", "يجب إدخال البيانات بشكل سليم");
            //    return false;
            //}



            //if (_tklfsub.Cost == null) _tklfsub.Cost = 0;
            //if (_tklfsub.Taziz == null) _tklfsub.Taziz = 0;
            return true;
        }

        private bool on_prdelete()
        {

            return true;
        }

        private void onDelete(){
    //    if (!on_prdelete()) return;
    //    try
    //    {
    //        using (var db = dbf.CreateDbContext())
    //            if (_tklfsub.Id != 0)
    //            {
    //                db.Remove(_tklfsub);
    //                if (db.SaveChanges() > 0) onNew();
    //            }

        //    }
        //    catch (DbUpdateException e)
        //    { throw e; }
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
    }


}
