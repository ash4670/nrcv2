@typeparam T
@inject IDbContextFactory<nrcwebContext> dbf
@using System.Reflection
@using System.ComponentModel
<style>
    .tableFixHead thead th , thead>tr {
        position: sticky;
        top: 0;
        z-index: 2;
        overflow: auto;
    }

    


   
</style>
@if (data == null)
{<p><em>Loading...</em></p> }
else
    {

        <div class="input-group m-0 p-0 ">
            <div class="input-group-text bg-transparent input-group-prepend">  <i class="oi oi-magnifying-glass"></i></div>
            <input @ref="searchinput" class="form-control" type="search" placeholder="بحث" @bind-value="_filter" @bind-value:event="oninput" @onkeyup="myfilter" />
        </div>

        <div class="tableFixHead" style=" height:250px ; overflow: auto; ">
            <table class="table  table-hover table-bordered  table-sm ">
                <thead class="font-weight-bold">
                    @myHeader
                    <tr style="height:50%" class="bg-primary text-center text-white ">
                        <th style="  width: 5%">م</th>
                        @{int k = 0; }
                        @foreach (PropertyInfo c in displayedcolumn)
                        {
                            <th @onclick="@(() => mysort(c.Name))">@if (_colheads.Any())
                            {@_colheads.ElementAt(k); k++;
                        }
                        else
                        { @GetAttributeDisplayName(c);
                    }  </th>



                        }
                    </tr>
                </thead>

                <tbody>
                    @{int rownum = 1; }
                   @foreach (T item in data)
                    {
                        <tr style="background-color:@(item== selectedrow ? "lightblue":"lightyellow" ) " class="text-right" @onclick="()=>f_Rowclicked(item)" @ondblclick="()=>f_Rowdblclicked(item)">
                            <td style="width: 5%">@rownum</td>
                            @foreach (PropertyInfo c in displayedcolumn)
                            {
                                <td>@c.GetValue(item, null) </td>
}
                        </tr>
                        rownum++;
                    }

                </tbody>
                @ChildContent
                @myFooter
            </table>
        </div>
    }



    @code { #region declarations
        ElementReference searchinput;
        public T selectedrow { get; set; }
        [Parameter] public List<T> data { get; set; }
        [Parameter] public RenderFragment myHeader { get; set; }
        [Parameter] public RenderFragment myFooter { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        [Parameter] public String scollist { get; set; }
        [Parameter] public String colheads { get; set; }
        [Parameter] public EventCallback<T> OnRowdblclicked { get; set; }
        [Parameter] public EventCallback<T> OnRowclicked { get; set; }
        private string _filter { get; set; } = "";
        private List<T> orgdata { get; set; }
        private IEnumerable<String> collist { get; set; }
        private IEnumerable<String> _colheads { get; set; } = new List<string>() ;
        private List<PropertyInfo> props;
        private List<PropertyInfo> displayedcolumn = new List<PropertyInfo>();
        #endregion
        public void mysort(string colname)
        {
            data = data.OrderBy(x => x.GetType().GetProperty(colname).GetValue(x, null)).ToList();
        }
        public void myfilter()
        {
            if (_filter == null || _filter == string.Empty)
                data = orgdata;
            else
                data = orgdata.Where(x => (x.GetType().GetProperties().Intersect(displayedcolumn).Where(p => x.GetType().GetProperty(p.Name).GetValue(x, null) != null)).Any(p => (x.GetType().GetProperty(p.Name).GetValue(x, null)).ToString().Contains(_filter))).ToList();
        }
        protected override void OnInitialized()
        {

        }

        protected override void OnParametersSet()
        {

            if ((scollist != null) && (scollist.Trim().Equals(scollist)))
            {
                scollist = scollist.ToLower();
                collist = scollist.Split(',');
            }
            if ((colheads != null) && (colheads.Trim().Equals(colheads)))
            {
                colheads = colheads.ToLower();
                _colheads = colheads.Split(',');
            }

            if (data == null) using (var db = dbf.CreateDbContext()) data = db.Set<T>().ToList<T>();
            //props = (data.FirstOrDefault()).GetType().GetProperties().ToList();
            props = (new T()).GetType().GetProperties().ToList();
            if (collist != null)
                //displayedcolumn =props.Where(p => collist.Contains(p.Name.ToLower())).ToList();
                //   displayedcolumn = props.Where(p => collist.Contains(p.Name.ToLower())).ToList();

                displayedcolumn= (from s in collist
                                  join p in props
                                     on s.ToLower() equals p.Name.ToLower()
                                  select p).ToList() ;
            else
                displayedcolumn = props.Where(p => p.PropertyType == typeof(string) || p.PropertyType.IsValueType).ToList();


            orgdata = data;

        }

        protected override void OnAfterRender(bool firstRender)
        {
            searchinput.FocusAsync();
        }

        public async void f_Rowclicked(T row)
        {
            selectedrow = row;
            await OnRowclicked.InvokeAsync(row);

        }

        public async void f_Rowdblclicked(T row)
        {
            selectedrow = row;
            await OnRowdblclicked.InvokeAsync(row);

        }

        private string GetAttributeDisplayName(PropertyInfo property)//this method to get the display name from the model attribute displayname
        {
            var atts = property.GetCustomAttributes(typeof(DisplayNameAttribute), true);
            if (atts.Length == 0) return null;
            return (atts[0] as DisplayNameAttribute).DisplayName;
        } }


