@typeparam T
@inject IDbContextFactory<nrcwebContext> dbf
@using System.Reflection
@using System.ComponentModel
<style>
    .tableFixHead thead th, thead > tr {
        position: sticky;
        top: 0;
        z-index: 2;
        overflow: auto;
    }
</style>

@if (pagedData == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="input-group m-0 p-0">
        <div class="input-group-text bg-transparent input-group-prepend">
            <i class="oi oi-magnifying-glass"></i>
        </div>
        <input @ref="searchinput" class="form-control" type="search" placeholder="بحث" @bind-value="_filter" @bind-value:event="oninput" @onkeyup="myfilter" />
    </div>

    <div class="tableFixHead" style="height:@FormHeight; overflow: auto;">
        <table class="table table-hover table-bordered table-sm">
            <thead class="font-weight-bold">
                @myHeader
                <tr style="height:50%" class="bg-primary text-center text-white">
                    <th style="width: 5%">م</th>
                    @{
                        int k = 0;
                    }
                    @foreach (PropertyInfo c in displayedcolumn)
                    {
                        <th @onclick="@(() => mysort(c.Name))">
                            @if (_colheads.Any())
                            {
                                @_colheads.ElementAt(k); k++;
                            }
                            else
                            {
                                @GetAttributeDisplayName(c);
                            }
                        </th>
                    }
                </tr>
            </thead>

            <tbody>
                @{
                    int rownum = (CurrentPage - 1) * PageSize + 1;
                }
                @foreach (T item in pagedData)
                {
                    <tr style="background-color:@(item == selectedrow ? "lightblue" : "lightyellow")" class="text-right" @onclick="() => f_Rowclicked(item)" @ondblclick="() => f_Rowdblclicked(item)">
                        <td style="width: 5%">@rownum</td>
                        @foreach (PropertyInfo c in displayedcolumn)
                        {
                            <td>@c.GetValue(item, null)</td>
                        }
                    </tr>
                    rownum++;
                }
            </tbody>
            @ChildContent
            @myFooter
        </table>
    </div>

    <!-- Pagination Controls -->
if (TotalPages> 1) { 
<div class="pagination mt-1">
     <button class="btn btn-toolbar btn-primary" @onclick="GoToFirstPage" disabled="@IsFirstPage"><span class="oi oi-media-step-backward"></span></button>
    <button class="btn btn-sm btn-primary" @onclick="GoToPreviousPage" disabled="@IsFirstPage"><span class="oi oi-media-skip-backward" /></button>
    <span>Page @CurrentPage of @TotalPages</span>
    <button class="btn btn-sm btn-primary" @onclick="GoToNextPage" disabled="@IsLastPage"><span class="oi oi-media-skip-forward" /></button>
    <button class="btn btn-sm btn-primary" @onclick="GoToLastPage" disabled="@IsLastPage"><span class="oi oi-media-step-forward" /></button>
</div>
                        }
}

@code {
    #region declarations
    ElementReference searchinput;
    public T selectedrow { get; set; }
    [Parameter] public List<T> data { get; set; }
    [Parameter] public RenderFragment myHeader { get; set; }
    [Parameter] public RenderFragment myFooter { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public String scollist { get; set; }
    [Parameter] public String colheads { get; set; }
    [Parameter] public EventCallback<T> OnRowdblclicked { get; set; }
    [Parameter] public EventCallback<T> OnRowclicked { get; set; }
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public string FormHeight { get; set; } = "350px";

    private string _filter { get; set; } = "";
    private List<T> orgdata { get; set; }
    private IEnumerable<String> collist { get; set; }
    private IEnumerable<String> _colheads { get; set; } = new List<string>();
    private List<PropertyInfo> props;
    private List<PropertyInfo> displayedcolumn = new List<PropertyInfo>();

    private int CurrentPage { get; set; } = 1;
    // private int PageSize { get; set; } = 10; // Adjust page size as needed
    private int TotalPages => (int)Math.Ceiling((double)data?.Count / PageSize);
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;
    private List<T> pagedData => data?
        .Skip((CurrentPage - 1) * PageSize)
        .Take(PageSize)
        .ToList();
    #endregion


    protected override void OnParametersSet()
    {
        if ((scollist != null) && (scollist.Trim().Equals(scollist)))
        {
            scollist = scollist.ToLower();
            collist = scollist.Split(',');
        }
        if ((colheads != null) && (colheads.Trim().Equals(colheads)))
        {
            colheads = colheads.ToLower();
            _colheads = colheads.Split(',');
        }

        if (data == null) using (var db = dbf.CreateDbContext()) data = db.Set<T>().ToList<T>();
        props = (new T()).GetType().GetProperties().ToList();
        if (collist != null)
            displayedcolumn = (from s in collist
                               join p in props on s.ToLower() equals p.Name.ToLower()
                               select p).ToList();
        else
            displayedcolumn = props.Where(p => p.PropertyType == typeof(string) || p.PropertyType.IsValueType).ToList();
        orgdata = data;
    }

    protected override void OnAfterRender(bool firstRender)
    {
       if (firstRender) searchinput.FocusAsync();
    }

    public void mysort(string colname)
    {
        data = data.OrderBy(x => x.GetType().GetProperty(colname).GetValue(x, null)).ToList();
        CurrentPage = 1;
    }

    public void myfilter()
    {
        if (string.IsNullOrEmpty(_filter))
            data = orgdata;
        else
            //data = orgdata.Where(x => (x.GetType().GetProperties().Intersect(displayedcolumn)
            //            .Where(p => x.GetType().GetProperty(p.Name).GetValue(x, null) != null))
            //            .Any(p => (x.GetType().GetProperty(p.Name).GetValue(x, null)).ToString().Contains(_filter)))
            //            .ToList();
            data = orgdata?
    .Where(x => displayedcolumn != null && displayedcolumn
        .Any(p =>
            x.GetType().GetProperty(p.Name)?
            .GetValue(x, null)?
            .ToString()?
            .Contains(_filter, StringComparison.OrdinalIgnoreCase) == true))
    .ToList() ?? new List<T>();

        CurrentPage = 1;
    }

    public async void f_Rowclicked(T row)
    {
        selectedrow = row;
        await OnRowclicked.InvokeAsync(row);
    }

    public async void f_Rowdblclicked(T row)
    {
        selectedrow = row;
        await OnRowdblclicked.InvokeAsync(row);
    }

    private string GetAttributeDisplayName(PropertyInfo property)
    {
        var atts = property.GetCustomAttributes(typeof(DisplayNameAttribute), true);
        return atts.Length == 0 ? null : ((DisplayNameAttribute)atts[0]).DisplayName;
    }

    private void GoToFirstPage() => CurrentPage = 1;

    private void GoToPreviousPage()
    {
        if (CurrentPage > 1) CurrentPage--;
    }

    private void GoToNextPage()
    {
        if (CurrentPage < TotalPages) CurrentPage++;
    }

    private void GoToLastPage() => CurrentPage = TotalPages;
}
